function CroxieLib:Notify(settings)
    local title = settings.Title or "Notification"
    local description = settings.Description or "This is a notification."
    local duration = settings.Duration or 5
    local notiType = settings.Type or "normal"

    -- Theme colors per Type
    local typeColors = {
        normal = Color3.fromRGB(70, 130, 255),
        success = Color3.fromRGB(46, 204, 113),
        warn = Color3.fromRGB(241, 196, 15),
        error = Color3.fromRGB(231, 76, 60)
    }

    local borderColor = typeColors[notiType] or typeColors["normal"]

    local PlayerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    local ScreenGui = Instance.new("ScreenGui", PlayerGui)
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Name = "CroxieNotification"

    local Notification = Instance.new("Frame")
    Notification.Size = UDim2.new(0, 320, 0, 100)
    Notification.Position = UDim2.new(1, 350, 1, -150) -- start off-screen
    Notification.AnchorPoint = Vector2.new(1, 1)
    Notification.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    Notification.BorderSizePixel = 0
    Notification.Parent = ScreenGui
    Notification.ClipsDescendants = true
    Notification.BackgroundTransparency = 0

    -- Rounded corners
    local UICorner = Instance.new("UICorner", Notification)
    UICorner.CornerRadius = UDim.new(0, 10)

    -- Animated Stroke Line
    local UIStroke = Instance.new("UIStroke", Notification)
    UIStroke.Color = borderColor
    UIStroke.Thickness = 2
    UIStroke.Transparency = 0
    UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

    -- Stroke Animation
    task.spawn(function()
        local angle = 0
        while Notification and Notification.Parent do
            angle += 1
            UIStroke.LineJoinMode = Enum.LineJoinMode.Round
            UIStroke.DashOffset = math.sin(tick() * 2) * 5
            task.wait(0.02)
        end
    end)

    -- Title
    local TitleLabel = Instance.new("TextLabel", Notification)
    TitleLabel.Text = title
    TitleLabel.Size = UDim2.new(1, -20, 0, 30)
    TitleLabel.Position = UDim2.new(0, 10, 0, 5)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.TextColor3 = borderColor
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextSize = 18
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left

    -- Description
    local DescriptionLabel = Instance.new("TextLabel", Notification)
    DescriptionLabel.Text = description
    DescriptionLabel.Size = UDim2.new(1, -20, 0, 50)
    DescriptionLabel.Position = UDim2.new(0, 10, 0, 35)
    DescriptionLabel.BackgroundTransparency = 1
    DescriptionLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    DescriptionLabel.Font = Enum.Font.Gotham
    DescriptionLabel.TextSize = 14
    DescriptionLabel.TextWrapped = true
    DescriptionLabel.TextXAlignment = Enum.TextXAlignment.Left
    DescriptionLabel.TextYAlignment = Enum.TextYAlignment.Top

    -- Tween in
    local TweenService = game:GetService("TweenService")
    local tweenIn = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
        Position = UDim2.new(1, -20, 1, -150)
    })
    tweenIn:Play()

    -- Auto remove after duration
    task.delay(duration, function()
        if Notification and Notification.Parent then
            local tweenOut = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {
                Position = UDim2.new(1, 350, 1, -150)
            })
            tweenOut:Play()
            tweenOut.Completed:Wait()
            Notification:Destroy()
        end
    end)
end

	local TabList = Instance.new("ScrollingFrame")
	TabList.Size = UDim2.new(1, 0, 0, 30)
	TabList.Position = UDim2.new(0, 0, 0, 35)
	TabList.ScrollBarThickness = 4
	TabList.ScrollingDirection = Enum.ScrollingDirection.X
	TabList.BackgroundTransparency = 1
	TabList.Parent = MainFrame

	local TabLayout = Instance.new("UIListLayout")
	TabLayout.FillDirection = Enum.FillDirection.Horizontal
	TabLayout.Padding = UDim.new(0, 5)
	TabLayout.Parent = TabList

	TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		TabList.CanvasSize = UDim2.new(0, TabLayout.AbsoluteContentSize.X, 1, 0)
	end)

	-- **CreateOpener Function (Moved Below MainFrame Creation)**
	function Cryptic:CreateOpener(Keybind)
		Keybind = Keybind or "LeftControl"  -- Default keybind

		local UIS = game:GetService("UserInputService")

		UIS.InputBegan:Connect(function(input, gameProcessed)
			if gameProcessed then return end
			if input.KeyCode == Enum.KeyCode[Keybind] then
				MainFrame.Visible = not MainFrame.Visible
			end
		end)
	end

	local Tabs = {}

	function Cryptic:CreateTab(tabName)
		if not TabList then
			warn("TabList is missing! Make sure it's initialized before calling CreateTab.")
			return
		end

		local TabButton = Instance.new("TextButton")
		TabButton.Size = UDim2.new(0, 150, 0, 30) -- Width: 100px, Full height
		TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
		TabButton.Text = tabName
		TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		TabButton.Font = Enum.Font.GothamBold
		TabButton.TextScaled = true -- Scale text automatically
		TabButton.Parent = TabList 


		local TextConstraint = Instance.new("UITextSizeConstraint")
		TextConstraint.MaxTextSize = 18
		TextConstraint.Parent = TabButton

		local TabFrame = Instance.new("ScrollingFrame")
		TabFrame.Size = UDim2.new(1, 0, 1, -100)
		TabFrame.Position = UDim2.new(0, 0, 0, 65)
		TabFrame.BackgroundColor3 = Theme
		TabFrame.Visible = false
		TabFrame.Parent = MainFrame
		TabFrame.CanvasSize = UDim2.new(0, 0, 1, 0)
		TabFrame.ScrollBarThickness = 5
		TabFrame.ScrollingDirection = Enum.ScrollingDirection.Y
		TabFrame.BackgroundTransparency = 1

		local ButtonLayout = Instance.new("UIListLayout")
		ButtonLayout.Parent = TabFrame
		ButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
		ButtonLayout.Padding = UDim.new(0, 5)

		ButtonLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			TabFrame.CanvasSize = UDim2.new(0, 0, 0, ButtonLayout.AbsoluteContentSize.Y + 10)
		end)

		Tabs[tabName] = TabFrame

		TabButton.MouseButton1Click:Connect(function()
			for _, tab in pairs(Tabs) do tab.Visible = false end
			TabFrame.Visible = true
		end)



		local Tab = {
			Frame = TabFrame,

			-- CreateLabel Function
			CreateLabel = function(self, config)
				local Label = Instance.new("TextLabel")
				Label.Size = UDim2.new(1, -10, 0, 30)
				Label.Text = config.Text or "Label"
				Label.Font = Enum.Font.GothamBold
				Label.TextColor3 = Color3.fromRGB(255, 255, 255)
				Label.BackgroundTransparency = 1
				Label.TextXAlignment = Enum.TextXAlignment.Left
				Label.Parent = self.Frame
				Label.TextSize = 16

				-- Create wrapper table
				local LabelObject = {
					Instance = Label
				}

				-- Function to update label text
				function LabelObject:NewText(newText)
					self.Instance.Text = newText
				end

				return LabelObject
			end,



			CreateInput = function(self, config)
				local InputName = config.Name or "Input"
				local PlaceholderText = config.PlaceholderText or "Enter Text" -- Renamed
				local InputScript = config.script or function() end
				local ClearTextOnInput = config.ClearTextOnInput or false -- New option for clearing text on input

				local InputFrame = Instance.new("Frame")
				InputFrame.Size = UDim2.new(1, -10, 0, 40)
				InputFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
				InputFrame.Parent = self.Frame

				local FrameCorner = Instance.new("UICorner")
				FrameCorner.CornerRadius = UDim.new(0, 6)
				FrameCorner.Parent = InputFrame

				local InputLabel = Instance.new("TextLabel")
				InputLabel.Size = UDim2.new(1, -10, 0, 20)
				InputLabel.Position = UDim2.new(0, 10, 0, 0)
				InputLabel.Text = InputName
				InputLabel.Font = Enum.Font.GothamBold
				InputLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				InputLabel.BackgroundTransparency = 1
				InputLabel.TextXAlignment = Enum.TextXAlignment.Left
				InputLabel.Parent = InputFrame
				InputLabel.TextSize = 24

				local TextBox = Instance.new("TextBox")
				TextBox.Size = UDim2.new(1, -20, 0, 20)
				TextBox.Position = UDim2.new(0, 10, 0, 20)
				TextBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
				TextBox.Font = Enum.Font.Gotham
				TextBox.PlaceholderText = PlaceholderText
				TextBox.Text = ""
				TextBox.ClearTextOnFocus = true -- Always clear text when focusing
				TextBox.Parent = InputFrame
				TextBox.TextSize = 18

				local TextBoxCorner = Instance.new("UICorner")
				TextBoxCorner.CornerRadius = UDim.new(0, 4)
				TextBoxCorner.Parent = TextBox

				local function ResetPlaceholder()
					if TextBox.Text == "" then
						TextBox.Text = ""
						TextBox.PlaceholderText = PlaceholderText
					end
				end

				TextBox.FocusLost:Connect(function(enterPressed)
					if enterPressed then
						InputScript(TextBox.Text) -- Call script function
						if ClearTextOnInput then -- Clear text only if `ClearTextOnInput` is true
							TextBox.Text = ""
						end
						ResetPlaceholder()
					end
				end)

				TextBox.FocusLost:Connect(ResetPlaceholder)

				return {
					Frame = InputFrame,
					SetText = function(text)
						TextBox.Text = text
					end,
					GetText = function()
						return TextBox.Text
					end
				}
			end,

			CreateButton = function(self, config)
				local Button = Instance.new("TextButton")
				Button.Size = UDim2.new(1, -10, 0, 40)
				Button.Text = "  " .. (config.Name or "Button")
				Button.Font = Enum.Font.GothamBold
				Button.TextColor3 = Color3.fromRGB(255, 255, 255)
				Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
				Button.Parent = self.Frame
				Button.TextSize = 24

				-- Create UI corner (rounded edges)
				local ButtonCorner = Instance.new("UICorner")
				ButtonCorner.CornerRadius = UDim.new(0, 6)
				ButtonCorner.Parent = Button

				-- Button click event
				Button.MouseButton1Click:Connect(function()
					if config.Script then
						config.Script()
					end
				end)


				local ButtonObject = {
					Instance = Button, -- Store the button reference

					-- Function to change button text
					SetName = function(self, newName)
						if self.Instance then
							self.Instance.Text = "  " .. newName
						end
					end,

					-- Function to change button color
					SetColor = function(self, newColor)
						if self.Instance then
							self.Instance.BackgroundColor3 = newColor
						end
					end
				}

				return ButtonObject
			end,


			CreateToggle = function(self, config)
				local ToggleState = config.ToggleState or false
				local ToggleName = config.Name or "Toggle"
				local ToggleDescription = config.Description or "No description provided"
				local ToggleScript = config.Script or function() end

				local ToggleFrame = Instance.new("Frame")
				ToggleFrame.Size = UDim2.new(1, -10, 0, 80)  -- Increased height to fit description
				ToggleFrame.BackgroundTransparency = 1
				ToggleFrame.Parent = self.Frame

				-- Toggle Name (top-left, 2% smaller)
				local ToggleLabel = Instance.new("TextLabel")
				ToggleLabel.Size = UDim2.new(1, -70, 0, 20)
				ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
				ToggleLabel.Text = ToggleName
				ToggleLabel.Font = Enum.Font.GothamBold
				ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				ToggleLabel.BackgroundTransparency = 1
				ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
				ToggleLabel.TextSize = 24 * 0.98  -- 2% smaller
				ToggleLabel.Parent = ToggleFrame

				-- Description (below the name, wrapped)
				local DescriptionLabel = Instance.new("TextLabel")
				DescriptionLabel.Size = UDim2.new(1, -70, 0, 40)  -- Adjust size for wrapping
				DescriptionLabel.Position = UDim2.new(0, 10, 0, 22)  -- Position below the name
				DescriptionLabel.Text = ToggleDescription
				DescriptionLabel.Font = Enum.Font.Gotham
				DescriptionLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
				DescriptionLabel.BackgroundTransparency = 1
				DescriptionLabel.TextXAlignment = Enum.TextXAlignment.Left
				DescriptionLabel.TextSize = 18
				DescriptionLabel.TextWrapped = true  -- Enable text wrapping
				DescriptionLabel.Parent = ToggleFrame

				-- Switch background
				local Switch = Instance.new("Frame")
				Switch.Size = UDim2.new(0, 50, 0, 25)
				Switch.Position = UDim2.new(1, -60, 0.5, -12)
				Switch.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(30, 30, 30)
				Switch.BorderSizePixel = 0
				Switch.Parent = ToggleFrame

				local SwitchCorner = Instance.new("UICorner")
				SwitchCorner.CornerRadius = UDim.new(1, 0)
				SwitchCorner.Parent = Switch

				-- Switch knob
				local Knob = Instance.new("Frame")
				Knob.Size = UDim2.new(0, 20, 0, 20)
				Knob.Position = ToggleState and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
				Knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Knob.Parent = Switch

				local KnobCorner = Instance.new("UICorner")
				KnobCorner.CornerRadius = UDim.new(1, 0)
				KnobCorner.Parent = Knob

				-- Tween service
				local TweenService = game:GetService("TweenService")
				local function UpdateToggle(state)
					ToggleState = state
					local bgColor = state and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(30, 30, 30)
					local knobPosition = state and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)

					TweenService:Create(Switch, TweenInfo.new(0.2), { BackgroundColor3 = bgColor }):Play()
					TweenService:Create(Knob, TweenInfo.new(0.2), { Position = knobPosition }):Play()

					pcall(ToggleScript, ToggleState)
				end

				Switch.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						UpdateToggle(not ToggleState)
					end
				end)

				return {
					Frame = ToggleFrame,
					SetState = UpdateToggle
				}
			end,

			CreateDropdown = function(self, config)
				local Name = config.Name or "Dropdown"
				local Options = config.Options or {"Option 1", "Option 2", "Option 3"}
				local CurrentOption = config.CurrentOption or Options[1]
				local MultiSelect = config.MultiSelect or false
				local Callback = config.Script or function() end

				local SelectedOptions = {} -- For MultiSelect

				-- Main Dropdown Frame
				local Dropdown = Instance.new("Frame")
				Dropdown.Size = UDim2.new(1, 0, 0, 60)
				Dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
				Dropdown.ClipsDescendants = false
				Dropdown.Parent = self.Frame

				local UICorner = Instance.new("UICorner", Dropdown)
				UICorner.CornerRadius = UDim.new(0, 6)

				-- Display Text
				local DropdownDisplay = Instance.new("TextLabel")
				DropdownDisplay.Size = UDim2.new(0.75, -10, 1, 0)
				DropdownDisplay.Position = UDim2.new(0, 10, 0, 0)
				DropdownDisplay.BackgroundTransparency = 1
				DropdownDisplay.Text = Name .. ": " .. (MultiSelect and "Select item" or CurrentOption)
				DropdownDisplay.TextSize = 25
				DropdownDisplay.Font = Enum.Font.GothamBold
				DropdownDisplay.TextColor3 = Color3.fromRGB(255, 255, 255)
				DropdownDisplay.TextXAlignment = Enum.TextXAlignment.Left
				DropdownDisplay.Parent = Dropdown

				-- Arrow Button
				local DropdownButton = Instance.new("TextButton")
				DropdownButton.Size = UDim2.new(0.2, -5, 1, -10)
				DropdownButton.Position = UDim2.new(0.8, 0, 0, 5)
				DropdownButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
				DropdownButton.Text = "▼"
				DropdownButton.TextSize = 36
				DropdownButton.Font = Enum.Font.GothamBold
				DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
				DropdownButton.Parent = Dropdown

				local ButtonCorner = Instance.new("UICorner", DropdownButton)
				ButtonCorner.CornerRadius = UDim.new(0, 6)

				-- Dropdown Container (resizes with list)
				local DropdownContainer = Instance.new("Frame")
				DropdownContainer.Size = UDim2.new(1, 0, 0, 60)
				DropdownContainer.BackgroundTransparency = 1
				DropdownContainer.Parent = self.Frame

				Dropdown.Parent = DropdownContainer

				-- Dropdown List
				local DropdownList = Instance.new("Frame")
				DropdownList.Size = UDim2.new(1, 0, 0, 0)
				DropdownList.Position = UDim2.new(0, 0, 1, 0)
				DropdownList.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				DropdownList.Visible = false
				DropdownList.ClipsDescendants = true
				DropdownList.Parent = Dropdown

				local UIListLayout = Instance.new("UIListLayout", DropdownList)
				UIListLayout.Padding = UDim.new(0, 4)
				UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

				local OptionButtons = {}

				for _, option in ipairs(Options) do
					local OptionButton = Instance.new("TextButton")
					OptionButton.Size = UDim2.new(1, 0, 0, 50)
					OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
					OptionButton.Text = option
					OptionButton.TextSize = 32
					OptionButton.Font = Enum.Font.GothamBold
					OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
					OptionButton.Parent = DropdownList

					table.insert(OptionButtons, OptionButton)

					OptionButton.MouseButton1Click:Connect(function()
						if MultiSelect then
							SelectedOptions[option] = not SelectedOptions[option] and true or nil

							local selectedItems = {}
							for key in pairs(SelectedOptions) do
								table.insert(selectedItems, key)
							end

							local selectedText = #selectedItems > 0 and "Select item: " .. table.concat(selectedItems, ", ") or "Select item"
							DropdownDisplay.Text = selectedText
							Callback(selectedItems)
						else
							DropdownDisplay.Text = Name .. ": " .. option
							Callback(option)

							-- Close dropdown
							isExpanded = false
							DropdownList:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Quad", 0.3, true, function()
								DropdownList.Visible = false
							end)
							DropdownContainer:TweenSize(UDim2.new(1, 0, 0, 60), "Out", "Quad", 0.3, true)
							TweenService:Create(DropdownButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Rotation = 0}):Play()
						end
					end)
				end

				-- Expand Toggle
				local isExpanded = false
				DropdownButton.MouseButton1Click:Connect(function()
					isExpanded = not isExpanded

					local newHeight = (#OptionButtons * 54) + 10 -- 50 height + 4 padding

					if isExpanded then
						DropdownList.Visible = true
						DropdownList:TweenSize(UDim2.new(1, 0, 0, newHeight), "Out", "Quad", 0.3, true)
						DropdownContainer:TweenSize(UDim2.new(1, 0, 0, 60 + newHeight), "Out", "Quad", 0.3, true)
						TweenService:Create(DropdownButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Rotation = 180}):Play()
					else
						DropdownList:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Quad", 0.3, true, function()
							DropdownList.Visible = false
						end)
						DropdownContainer:TweenSize(UDim2.new(1, 0, 0, 60), "Out", "Quad", 0.3, true)
						TweenService:Create(DropdownButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Rotation = 0}):Play()
					end
				end)

				return Dropdown
			end,

			CreateTimer = function(self, config)
				local TimerName = config.Name or "Timer"
				local Mode = config.Mode or "CountDown"
				local AutoStart = config.AutoStart or false

				-- Countdown properties
				local Countdown = config.Countdown or {}
				local SecondDuration = Countdown.SecondDuration or 60
				local MinuteDuration = Countdown.MinuteDuration or 60
				local HourDuration = Countdown.HourDuration or 24

				-- Stopwatch properties
				local StopWatch = config.StopWatch or {}
				local StopStopWatch = StopWatch.StopStopWatch or false

				-- Create Timer UI
				local TimerFrame = Instance.new("Frame")
				TimerFrame.Name = TimerName
				TimerFrame.Size = UDim2.new(0, 200, 0, 50)
				TimerFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
				TimerFrame.Parent = self.Frame  -- Uses self.Frame instead of MainFrame

				local TimerLabel = Instance.new("TextLabel")
				TimerLabel.Size = UDim2.new(1, 0, 1, 0)
				TimerLabel.BackgroundTransparency = 1
				TimerLabel.Text = "00:00:00"
				TimerLabel.Font = Enum.Font.GothamBold
				TimerLabel.TextSize = 16
				TimerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				TimerLabel.Parent = TimerFrame

				-- Start/Stop button (if AutoStart is false)
				local StartButton
				if not AutoStart or StopStopWatch then
					StartButton = Instance.new("TextButton")
					StartButton.Size = UDim2.new(0, 60, 0, 30)
					StartButton.Position = UDim2.new(0.5, -30, 1, 5)
					StartButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
					StartButton.Text = "Start"
					StartButton.Parent = TimerFrame
				end

				local running = false
				local seconds = (Mode == "CountDown") and (HourDuration * 3600 + MinuteDuration * 60 + SecondDuration) or 0

				local function formatTime(s)
					local h = math.floor(s / 3600)
					local m = math.floor((s % 3600) / 60)
					local sec = s % 60
					return string.format("%02d:%02d:%02d", h, m, sec)
				end

				local function startTimer()
					if running then return end
					running = true
					StartButton.Text = "Stop"  -- Change button text

					while running do
						wait(1)
						if Mode == "CountDown" then
							seconds = seconds - 1
							if seconds <= 0 then
								running = false
								StartButton.Text = "Start"
								break
							end
						else
							seconds = seconds + 1
						end
						TimerLabel.Text = formatTime(seconds)
					end
				end

				local function stopTimer()
					running = false
					StartButton.Text = "Start"
				end

				if AutoStart then
					startTimer()
				elseif StartButton then
					StartButton.MouseButton1Click:Connect(function()
						if running then
							stopTimer()
						else
							startTimer()
						end
					end)
				end

				return TimerFrame
			end,

			CreateSlider = function(self, config)
				local SliderName = config.Name or "Slider"
				local MinValue = config.MinValue or 0
				local MaxValue = config.MaxValue or 100
				local CurrentValue = math.clamp(config.CurrentValue or MinValue, MinValue, MaxValue)
				local Increment = config.Increasement or 1
				local Suffix = config.Suffix or ""
				local Script = config.Script or function() end

				local SliderFrame = Instance.new("Frame")
				SliderFrame.Size = UDim2.new(1, -10, 0, 60)  -- Increased height for better label space
				SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
				SliderFrame.Parent = self.Frame

				local SliderLabel = Instance.new("TextLabel")
				SliderLabel.Size = UDim2.new(1, -10, 0, 20)
				SliderLabel.Position = UDim2.new(0, 5, 0, 0)
				SliderLabel.Text = SliderName .. ": " .. CurrentValue .. Suffix
				SliderLabel.Font = Enum.Font.GothamBold
				SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				SliderLabel.BackgroundTransparency = 1
				SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
				SliderLabel.TextSize = 18
				SliderLabel.TextWrapped = true  -- Enable wrapping for long labels
				SliderLabel.Parent = SliderFrame

				local SliderBar = Instance.new("Frame")
				SliderBar.Size = UDim2.new(1, -10, 0, 8)
				SliderBar.Position = UDim2.new(0, 5, 0, 25)
				SliderBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				SliderBar.Parent = SliderFrame

				local SliderFill = Instance.new("Frame")
				SliderFill.Size = UDim2.new((CurrentValue - MinValue) / (MaxValue - MinValue), 0, 1, 0)
				SliderFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
				SliderFill.Parent = SliderBar

				local SliderButton = Instance.new("TextButton")
				SliderButton.Size = UDim2.new(0, 15, 1.5, 0)
				SliderButton.Position = UDim2.new((CurrentValue - MinValue) / (MaxValue - MinValue), -7, -0.25, 0)
				SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SliderButton.Text = ""
				SliderButton.Parent = SliderBar

				local ButtonCorner = Instance.new("UICorner")
				ButtonCorner.CornerRadius = UDim.new(1, 0)
				ButtonCorner.Parent = SliderButton

				-- Function to update the slider based on the input position
				local function UpdateSlider(input)
					local Position = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
					local NewValue = math.round((MinValue + (MaxValue - MinValue) * Position) / Increment) * Increment

					SliderFill.Size = UDim2.new(Position, 0, 1, 0)
					SliderButton.Position = UDim2.new(Position, -7, -0.25, 0)
					SliderLabel.Text = SliderName .. ": " .. NewValue .. " " .. Suffix  -- Added space before suffix

					pcall(Script, NewValue)
				end

				-- Handle slider button input
				SliderButton.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						UpdateSlider(input)
						local moveConnection
						local releaseConnection
						moveConnection = game:GetService("UserInputService").InputChanged:Connect(function(moveInput)
							if moveInput.UserInputType == Enum.UserInputType.MouseMovement then
								UpdateSlider(moveInput)
							end
						end)
						releaseConnection = game:GetService("UserInputService").InputEnded:Connect(function(releaseInput)
							if releaseInput.UserInputType == Enum.UserInputType.MouseButton1 then
								if moveConnection then moveConnection:Disconnect() end
								if releaseConnection then releaseConnection:Disconnect() end
							end
						end)
					end
				end)

				-- Return the frame and a setter function for external use
				return {
					Frame = SliderFrame,
					SetValue = function(value)
						local ClampedValue = math.clamp(value, MinValue, MaxValue)
						local Position = (ClampedValue - MinValue) / (MaxValue - MinValue)
						SliderFill.Size = UDim2.new(Position, 0, 1, 0)
						SliderButton.Position = UDim2.new(Position, -7, -0.25, 0)
						SliderLabel.Text = SliderName .. ": " .. ClampedValue .. Suffix
						pcall(Script, ClampedValue)
					end
				}
			end
		}

		return Tab
	end

	return Cryptic
end

return Cryptic
