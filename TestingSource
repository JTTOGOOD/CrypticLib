warn("Report to (@MynamesJT) on Discord if you come across any issues.")

local Cryptic = {}

function Cryptic:CreateWindow(config)
	local Name = config.Name or "Cryptic UI"
	local LoadingScreenEnabled = config.LoadingScreen or false
	local LoadingScreenDuration = config.LoadingScreenDuration or 2
	local LoadingTitle = config.LoadingTitle or "Loading..."
	local LoadingSubtitle = config.LoadingSubtitle or "Please wait"
	local Theme = config.Theme or Color3.fromRGB(25, 25, 25)
	local DebugMode = config.LibraryElementObservation or false

	-- Key System Configurations
	local KeySystemEnabled = config.KeySystem or false
	local CorrectKey = config.Key or "Hello"
	local KeyTitle = config.KeyTitle or "Key System"
	local KeySubTitle = config.KeySubTitle or "Enter Key below"
	local TextboxPlaceholder = config.TextboxText or "Enter Key"

	-- Debug function
	local function debugPrint(elementName, success, errMsg)
		if DebugMode then
			if success then
				print("‚úÖ " .. elementName .. " passed!")
			else
				warn("‚ùå Error with " .. elementName .. ": " .. errMsg)
			end
		end
	end

	-- üî• Prevent UI Reset Issues (Move UI to CoreGui)
	local existingUI = game:GetService("CoreGui"):FindFirstChild("CroxieLib")
	if existingUI then
		existingUI:Destroy() -- Remove old instance before creating a new one
	end

	-- Create ScreenGui
	local ScreenGui = Instance.new("ScreenGui")
	local success, err = pcall(function()
		ScreenGui.Name = "CroxieLib"
		ScreenGui.Parent = game:GetService("CoreGui") -- üî• Fixes UI disappearing issue
		ScreenGui.ResetOnSpawn = false
	end)
	debugPrint("ScreenGui", success, err)

	-- üñºÔ∏è Main UI Frame (Updated)
	local MainFrame = Instance.new("Frame")
	success, err = pcall(function()
		MainFrame.Name = "MainFrame"
		MainFrame.Size = UDim2.new(0, 735, 0, 564) -- Updated size
		MainFrame.Position = UDim2.new(0.20653908, 0, 0.0923520923, 0) -- Updated position
		MainFrame.BackgroundColor3 = Color3.fromRGB(39, 39, 39) -- Updated background color
		MainFrame.BorderSizePixel = 0
		MainFrame.Visible = false
		MainFrame.Parent = ScreenGui
	end)
	debugPrint("MainFrame", success, err)

	-- üîµ UI Corner (Rounded edges)
	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 10)
	UICorner.Parent = MainFrame

	-- üî† Title Label (Updated)
	local TitleLabel = Instance.new("TextLabel")
	success, err = pcall(function()
		TitleLabel.Name = "TitleLabel"
		TitleLabel.Size = UDim2.new(0, 727, 0, 50)
		TitleLabel.Position = UDim2.new(0.0170940179, 0, 0, 0) -- Same position
		TitleLabel.BackgroundTransparency = 1
		TitleLabel.Text = Name -- Uses the `Name` from config
		TitleLabel.Font = Enum.Font.GothamBold
		TitleLabel.TextSize = 32 -- Increased text size
		TitleLabel.TextColor3 = Color3.new(1, 0.333333, 0) -- Kept same color
		TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
		TitleLabel.Parent = MainFrame
	end)
	debugPrint("TitleLabel", success, err)


	-- üõë Key System
	if KeySystemEnabled then
		local KeySystemFrame = Instance.new("Frame")
		KeySystemFrame.Size = UDim2.new(0, 400, 0, 200)
		KeySystemFrame.Position = UDim2.new(0.5, -200, 0.5, -100)
		KeySystemFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		KeySystemFrame.Parent = ScreenGui

		local KeyTitleLabel = Instance.new("TextLabel")
		KeyTitleLabel.Text = KeyTitle
		KeyTitleLabel.Size = UDim2.new(1, 0, 0, 30)
		KeyTitleLabel.TextSize = 20
		KeyTitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		KeyTitleLabel.Parent = KeySystemFrame

		local KeySubTitleLabel = Instance.new("TextLabel")
		KeySubTitleLabel.Text = KeySubTitle
		KeySubTitleLabel.Size = UDim2.new(1, 0, 0, 20)
		KeySubTitleLabel.Position = UDim2.new(0, 0, 0, 30)
		KeySubTitleLabel.TextSize = 14
		KeySubTitleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
		KeySubTitleLabel.Parent = KeySystemFrame

		local KeyTextBox = Instance.new("TextBox")
		KeyTextBox.Size = UDim2.new(0.8, 0, 0, 30)
		KeyTextBox.Position = UDim2.new(0.1, 0, 0, 60)
		KeyTextBox.Text = TextboxPlaceholder
		KeyTextBox.ClearTextOnFocus = false
		KeyTextBox.TextSize = 16
		KeyTextBox.Parent = KeySystemFrame

		local EnterButton = Instance.new("TextButton")
		EnterButton.Size = UDim2.new(0.8, 0, 0, 30)
		EnterButton.Position = UDim2.new(0.1, 0, 0, 100)
		EnterButton.Text = "Enter"
		EnterButton.TextSize = 16
		EnterButton.Parent = KeySystemFrame

		local ErrorMessage = Instance.new("TextLabel")
		ErrorMessage.Size = UDim2.new(1, 0, 0, 20)
		ErrorMessage.Position = UDim2.new(0, 0, 0, 140)
		ErrorMessage.TextColor3 = Color3.fromRGB(255, 0, 0)
		ErrorMessage.Text = ""
		ErrorMessage.Visible = false
		ErrorMessage.Parent = KeySystemFrame

		-- üîπ Enter Button Logic
		EnterButton.MouseButton1Click:Connect(function()
			if KeyTextBox.Text == CorrectKey then
				KeySystemFrame:Destroy() -- Remove Key System UI
				if LoadingScreenEnabled then
					showLoadingScreen() -- Call loading screen
				else
					MainFrame.Visible = true
				end
			else
				ErrorMessage.Text = "Incorrect Key! Try Again."
				ErrorMessage.Visible = true
			end
		end)
	elseif LoadingScreenEnabled then
		-- No Key System, but Loading Screen is enabled
		local function showLoadingScreen()
			local LoadingFrame = Instance.new("Frame")
			LoadingFrame.Size = UDim2.new(1, 0, 1, 0)
			LoadingFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
			LoadingFrame.Parent = ScreenGui

			local LoadingLabel = Instance.new("TextLabel")
			LoadingLabel.Size = UDim2.new(1, 0, 0, 50)
			LoadingLabel.Position = UDim2.new(0, 0, 0.5, -25)
			LoadingLabel.Text = LoadingTitle
			LoadingLabel.TextSize = 20
			LoadingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			LoadingLabel.Font = Enum.Font.GothamBold
			LoadingLabel.Parent = LoadingFrame

			task.spawn(function()
				wait(LoadingScreenDuration)
				LoadingFrame:Destroy()
				MainFrame.Visible = true
			end)
		end
		showLoadingScreen()
	else
		-- No Key System and No Loading Screen, show UI instantly
		MainFrame.Visible = true
	end


	local Dragging, DragInput, DragStart, StartPos

	TitleLabel.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			Dragging = true
			DragStart = input.Position
			StartPos = MainFrame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					Dragging = false
				end
			end)
		end
	end)

	TitleLabel.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			DragInput = input
		end
	end)

	game:GetService("UserInputService").InputChanged:Connect(function(input)
		if input == DragInput and Dragging then
			local delta = input.Position - DragStart
			MainFrame.Position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + delta.X, StartPos.Y.Scale, StartPos.Y.Offset + delta.Y)
		end
	end)

	function Cryptic:Notify(settings)
    local Title = settings.Title or "Notification"
    local Description = settings.Description or "No Description Provided"
    local Duration = settings.Duration or 5
    local CloseButton = settings.CloseButton or false
    local ButtonText = settings.ButtonText or "Close"
    
    local player = game:GetService("Players").LocalPlayer
    local PlayerGui = player:WaitForChild("PlayerGui") -- Ensure it loads
    
    -- Create Notification UI
    local NotificationFrame = Instance.new("Frame")
    NotificationFrame.Size = UDim2.new(0, 468, 0, 80) -- Default height
    NotificationFrame.Position = UDim2.new(0.75, 0, 0.75, 0)
    NotificationFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    NotificationFrame.BackgroundTransparency = 0.1
    NotificationFrame.Parent = PlayerGui -- Ensure it goes inside PlayerGui
    
    -- Title Label
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Text = Title
    TitleLabel.Size = UDim2.new(1, -12, 0, 30)
    TitleLabel.Position = UDim2.new(0, 6, 0, 6) 
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextSize = 20
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.TextWrapped = true
    TitleLabel.Parent = NotificationFrame

    -- Description Label
    local DescLabel = Instance.new("TextLabel")
    DescLabel.Text = Description
    DescLabel.Position = UDim2.new(0, 6, 0, 36) 
    DescLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    DescLabel.Size = UDim2.new(1, -12, 0, 40)
    DescLabel.TextSize = 18
    DescLabel.TextWrapped = true
    DescLabel.BackgroundTransparency = 1
    DescLabel.Font = Enum.Font.Gotham
    DescLabel.TextXAlignment = Enum.TextXAlignment.Left
    DescLabel.TextYAlignment = Enum.TextYAlignment.Top
    DescLabel.Parent = NotificationFrame

    -- Adjust height based on text size
    task.wait(0.05)
    local textSize = game:GetService("TextService"):GetTextSize(Description, 18, Enum.Font.Gotham, Vector2.new(440, math.huge))
    local newHeight = math.clamp(textSize.Y + 50, 80, 200)
    NotificationFrame.Size = UDim2.new(0, 468, 0, newHeight)
    DescLabel.Size = UDim2.new(1, -12, 0, newHeight - 50)

    -- Close Button (if enabled)
    if CloseButton then
        local CloseBtn = Instance.new("TextButton")
        CloseBtn.Text = ButtonText
        CloseBtn.Position = UDim2.new(0.5, -40, 1, -30)
        CloseBtn.Size = UDim2.new(0.4, 0, 0, 25)
        CloseBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        CloseBtn.Parent = NotificationFrame

        CloseBtn.MouseButton1Click:Connect(function()
            NotificationFrame:Destroy()
        end)
    end

    -- Ensure it's visible
    NotificationFrame.BackgroundTransparency = 0.1
    TitleLabel.TextTransparency = 0
    DescLabel.TextTransparency = 0

    -- Tween Animation
    local TweenService = game:GetService("TweenService")
    local TweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

    TweenService:Create(NotificationFrame, TweenInfo, {BackgroundTransparency = 0.1}):Play()
    TweenService:Create(TitleLabel, TweenInfo, {TextTransparency = 0}):Play()
    TweenService:Create(DescLabel, TweenInfo, {TextTransparency = 0}):Play()

    -- Auto-Close if CloseButton is false
    if not CloseButton then
        task.wait(Duration)
        TweenService:Create(NotificationFrame, TweenInfo, {BackgroundTransparency = 1}):Play()
        TweenService:Create(TitleLabel, TweenInfo, {TextTransparency = 1}):Play()
        TweenService:Create(DescLabel, TweenInfo, {TextTransparency = 1}):Play()
        task.wait(0.5)
        NotificationFrame:Destroy()
    end
end

--// Tab List
local TabList = Instance.new("ScrollingFrame")
TabList.Name = "TabsList"
TabList.Parent = MainFrame
TabList.Active = true
TabList.BackgroundColor3 = Color3.new(1, 1, 1)
TabList.BackgroundTransparency = 1
TabList.BorderColor3 = Color3.new(0, 0, 0)
TabList.BorderSizePixel = 0
TabList.Position = UDim2.new(0.0038, 0, 0.0882, 0)
TabList.Size = UDim2.new(0, 733, 0, 52)
TabList.ScrollBarThickness = 4
TabList.ScrollingDirection = Enum.ScrollingDirection.X

local TabLayout = Instance.new("UIListLayout")
TabLayout.FillDirection = Enum.FillDirection.Horizontal
TabLayout.Padding = UDim.new(0, 5)
TabLayout.Parent = TabList

TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    TabList.CanvasSize = UDim2.new(0, TabLayout.AbsoluteContentSize.X, 1, 0)
end)

function Cryptic:CreateOpener(Keybind)
    Keybind = Keybind or "LeftControl"  -- Default keybind
    local UIS = game:GetService("UserInputService")

    UIS.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode[Keybind] then
            MainFrame.Visible = not MainFrame.Visible
        end
    end)
end

local Tabs = {}

function Cryptic:CreateTab(tabName)
    if not TabList then
        warn("TabList is missing! Make sure it's initialized before calling CreateTab.")
        return
    end

    -- Create Tab Button
    local TabButton = Instance.new("TextButton")
    local UICorner = Instance.new("UICorner")

    TabButton.Name = "TabButton"
    TabButton.Parent = TabList
    TabButton.BackgroundColor3 = Color3.new(1, 0.333, 0) -- Orange color
    TabButton.BorderColor3 = Color3.new(0, 0, 0)
    TabButton.BorderSizePixel = 0
    TabButton.Size = UDim2.new(0, 161, 0, 42)
    TabButton.Font = Enum.Font.SourceSansBold
    TabButton.TextColor3 = Color3.new(1, 1, 1)
    TabButton.TextSize = 20
    TabButton.Text = tabName

    UICorner.Parent = TabButton
    UICorner.CornerRadius = UDim.new(0, 25)

    -- Create Tab Frame
    local TabFrame = Instance.new("ScrollingFrame")
    TabFrame.Name = "TabFrame"
    TabFrame.Parent = MainFrame
    TabFrame.Active = true
    TabFrame.BackgroundColor3 = Color3.new(1, 1, 1)
    TabFrame.BackgroundTransparency = 1
    TabFrame.BorderColor3 = Color3.new(0, 0, 0)
    TabFrame.BorderSizePixel = 0
    TabFrame.Position = UDim2.new(0, 0, 0.1702, 0)
    TabFrame.Size = UDim2.new(0, 735, 0, 467)
    TabFrame.CanvasSize = UDim2.new(0, 0, 1, 0)
    TabFrame.ScrollBarThickness = 5
    TabFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    TabFrame.Visible = false

    local ButtonLayout = Instance.new("UIListLayout")
    ButtonLayout.Parent = TabFrame
    ButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ButtonLayout.Padding = UDim.new(0, 5)

    ButtonLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, ButtonLayout.AbsoluteContentSize.Y + 10)
    end)

    Tabs[tabName] = TabFrame

    -- Tab Button Click Event
    TabButton.MouseButton1Click:Connect(function()
        for _, tab in pairs(Tabs) do tab.Visible = false end
        TabFrame.Visible = true
    end)
end

		local Tab = {
			Frame = TabFrame,

			-- CreateLabel Function
			CreateLabel = function(self, config)
				local Label = Instance.new("TextLabel")
				Label.Size = UDim2.new(1, -10, 0, 30)
				Label.Text = config.Text or "Label"
				Label.Font = Enum.Font.GothamBold
				Label.TextColor3 = Color3.fromRGB(255, 255, 255)
				Label.BackgroundTransparency = 1
				Label.TextXAlignment = Enum.TextXAlignment.Left
				Label.Parent = self.Frame

				return Label
			end,

			CreateInput = function(self, config)
				local InputName = config.Name or "Input"
				local PlaceholderText = config.TextboxText or "Enter Text"
				local InputScript = config.script or function() end

				-- Create the frame
				local InputFrame = Instance.new("Frame")
				InputFrame.Size = UDim2.new(1, -10, 0, 40)
				InputFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
				InputFrame.Parent = self.Frame

				-- Add corner radius
				local FrameCorner = Instance.new("UICorner")
				FrameCorner.CornerRadius = UDim.new(0, 6)
				FrameCorner.Parent = InputFrame

				-- Create label
				local InputLabel = Instance.new("TextLabel")
				InputLabel.Size = UDim2.new(1, -10, 0, 20)
				InputLabel.Position = UDim2.new(0, 10, 0, 0)
				InputLabel.Text = InputName
				InputLabel.Font = Enum.Font.GothamBold
				InputLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				InputLabel.BackgroundTransparency = 1
				InputLabel.TextXAlignment = Enum.TextXAlignment.Left
				InputLabel.Parent = InputFrame

				-- Create textbox
				local TextBox = Instance.new("TextBox")
				TextBox.Size = UDim2.new(1, -20, 0, 20)
				TextBox.Position = UDim2.new(0, 10, 0, 20)
				TextBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
				TextBox.Font = Enum.Font.Gotham
				TextBox.PlaceholderText = PlaceholderText
				TextBox.Text = ""
				TextBox.ClearTextOnFocus = false
				TextBox.Parent = InputFrame
				TextBox.TextSize = 18  

				-- Add corner radius to textbox
				local TextBoxCorner = Instance.new("UICorner")
				TextBoxCorner.CornerRadius = UDim.new(0, 4)
				TextBoxCorner.Parent = TextBox

				-- Function to reset placeholder text when textbox is empty
				local function ResetPlaceholder()
					if TextBox.Text == "" then
						TextBox.Text = ""
						TextBox.PlaceholderText = PlaceholderText
					end
				end

				-- Event when the user presses Enter
				TextBox.FocusLost:Connect(function(enterPressed)
					if enterPressed then
						InputScript(TextBox.Text) -- Call script function
						TextBox.Text = "" -- Clear text
						ResetPlaceholder()
					end
				end)

				-- Ensure placeholder resets when clicking away
				TextBox.FocusLost:Connect(ResetPlaceholder)

				return {
					Frame = InputFrame,
					SetText = function(text)
						TextBox.Text = text
					end,
					GetText = function()
						return TextBox.Text
					end
				}
			end,

                        CreateButton = function(self, config)
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(1, -10, 0, 40)
    Button.Text = "  " .. (config.Name or "Button")
    Button.Font = Enum.Font.GothamBold
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    Button.Parent = self.Frame

    -- Create UI corner (rounded edges)
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 6)
    ButtonCorner.Parent = Button

    -- Button click event
    Button.MouseButton1Click:Connect(function()
        if config.Script then
            config.Script()
        end
    end)

    -- ‚úÖ Return a table with useful methods
    local ButtonObject = {
        Instance = Button, -- Store the button reference

        -- Function to change button text
        SetName = function(self, newName)
            if self.Instance then
                self.Instance.Text = "  " .. newName
            end
        end,

        -- Function to change button color
        SetColor = function(self, newColor)
            if self.Instance then
                self.Instance.BackgroundColor3 = newColor
            end
        end
    }

    return ButtonObject
end,


			CreateToggle = function(self, config)
				local ToggleState = config.ToggleState or false
				local ToggleName = config.Name or "Toggle"
				local ToggleScript = config.Script or function() end

				local ToggleFrame = Instance.new("Frame")
				ToggleFrame.Size = UDim2.new(1, -10, 0, 35)
				ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
				ToggleFrame.Parent = self.Frame

				local FrameCorner = Instance.new("UICorner")
				FrameCorner.CornerRadius = UDim.new(0, 6)
				FrameCorner.Parent = ToggleFrame

				local ToggleLabel = Instance.new("TextLabel")
				ToggleLabel.Size = UDim2.new(1, -70, 1, 0)
				ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
				ToggleLabel.Text = ToggleName
				ToggleLabel.Font = Enum.Font.GothamBold
				ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				ToggleLabel.BackgroundTransparency = 1
				ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
				ToggleLabel.Parent = ToggleFrame

				local ToggleButton = Instance.new("TextButton")
				ToggleButton.Size = UDim2.new(0, 50, 0.8, 0)
				ToggleButton.Position = UDim2.new(1, -60, 0.1, 0)
				ToggleButton.Text = ToggleState and "ON" or "OFF"
				ToggleButton.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(10, 10, 10)
				ToggleButton.Font = Enum.Font.GothamBold
				ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
				ToggleButton.Parent = ToggleFrame

				local ButtonCorner = Instance.new("UICorner")
				ButtonCorner.CornerRadius = UDim.new(0, 6)
				ButtonCorner.Parent = ToggleButton

				local function UpdateToggle(state)
					ToggleState = state
					ToggleButton.Text = ToggleState and "ON" or "OFF"
					ToggleButton.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(10, 10, 10)
					pcall(ToggleScript, ToggleState)
				end

				ToggleButton.MouseButton1Click:Connect(function()
					UpdateToggle(not ToggleState)
				end)

				return {
					Frame = ToggleFrame,
					SetState = UpdateToggle
				}
			end,

			CreateDropdown = function(self, config)
				local Name = config.Name or "Dropdown"
				local Options = config.Options or {"Option 1", "Option 2", "Option 3"}
				local CurrentOption = config.CurrentOption or Options[1]
				local MultiSelect = config.MultiSelect or false
				local Callback = config.Script or function() end

				local SelectedOptions = {} -- Stores selected options (for MultiSelect)

				-- Main Dropdown Frame
				local Dropdown = Instance.new("Frame")
				Dropdown.Size = UDim2.new(1, 0, 0, 60)
				Dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
				Dropdown.Parent = self.Frame
				Dropdown.ClipsDescendants = false

				local UICorner = Instance.new("UICorner", Dropdown)
				UICorner.CornerRadius = UDim.new(0, 6)

				-- Dropdown Display
				local DropdownDisplay = Instance.new("TextLabel")
				DropdownDisplay.Size = UDim2.new(0.75, -10, 1, 0)
				DropdownDisplay.Position = UDim2.new(0, 10, 0, 0)
				DropdownDisplay.BackgroundTransparency = 1
				DropdownDisplay.Text = Name .. ": " .. (MultiSelect and "Select item" or CurrentOption)
				DropdownDisplay.TextSize = 32
				DropdownDisplay.Font = Enum.Font.GothamBold
				DropdownDisplay.TextColor3 = Color3.fromRGB(255, 255, 255)
				DropdownDisplay.TextXAlignment = Enum.TextXAlignment.Left
				DropdownDisplay.Parent = Dropdown

				-- Dropdown Button
				local DropdownButton = Instance.new("TextButton")
				DropdownButton.Size = UDim2.new(0.2, -5, 1, -10)
				DropdownButton.Position = UDim2.new(0.8, 0, 0, 5)
				DropdownButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
				DropdownButton.Text = "‚ñº"
				DropdownButton.TextSize = 36
				DropdownButton.Font = Enum.Font.GothamBold
				DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
				DropdownButton.Parent = Dropdown

				local ButtonCorner = Instance.new("UICorner", DropdownButton)
				ButtonCorner.CornerRadius = UDim.new(0, 6)

				-- Dropdown Menu
				local DropdownList = Instance.new("Frame")
				DropdownList.Size = UDim2.new(1, 0, 0, 0)
				DropdownList.Position = UDim2.new(0, 0, 1, 0)
				DropdownList.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				DropdownList.Visible = false
				DropdownList.Parent = Dropdown

				local UIListLayout = Instance.new("UIListLayout", DropdownList)
				UIListLayout.Padding = UDim.new(0, 4)
				UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

				-- **üî• EXPANDABLE CONTAINER TO PREVENT COLLISION**
				local DropdownContainer = Instance.new("Frame")
				DropdownContainer.Size = UDim2.new(1, 0, 0, 60) -- **Starts at normal size**
				DropdownContainer.BackgroundTransparency = 1
				DropdownContainer.Parent = self.Frame

				Dropdown.Parent = DropdownContainer -- **Put everything inside the container**

				-- üî• Create Option Buttons
				for _, option in pairs(Options) do
					local OptionButton = Instance.new("TextButton")
					OptionButton.Size = UDim2.new(1, 0, 0, 50)
					OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
					OptionButton.Text = option
					OptionButton.TextSize = 32
					OptionButton.Font = Enum.Font.GothamBold
					OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
					OptionButton.Parent = DropdownList

					OptionButton.MouseButton1Click:Connect(function()
						if MultiSelect then
							-- Toggle Selection
							if SelectedOptions[option] then
								SelectedOptions[option] = nil -- Deselect
							else
								SelectedOptions[option] = true -- Select
							end

							-- Update Dropdown Display
							local selectedText = "Select item"
							local selectedItems = {}
							for key in pairs(SelectedOptions) do
								table.insert(selectedItems, key)
							end

							if #selectedItems > 0 then
								selectedText = "Select item: " .. table.concat(selectedItems, ", ")
							end

							DropdownDisplay.Text = selectedText
							Callback(selectedItems) -- Return all selected items
						else
							DropdownDisplay.Text = Name .. ": " .. option
							Callback(option)

							-- Close Dropdown
							DropdownList:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Quad", 0.3, true, function()
								DropdownList.Visible = false
							end)
							DropdownButton.Text = "‚ñº"
							DropdownContainer:TweenSize(UDim2.new(1, 0, 0, 60), "Out", "Quad", 0.3, true) -- üî• Reset space
						end
					end)
				end

				-- üî• Dropdown Toggle (Expands Space)
				local isExpanded = false
				DropdownButton.MouseButton1Click:Connect(function()
					isExpanded = not isExpanded

					if isExpanded then
						DropdownList.Visible = true
						local newHeight = (#Options * 50) + 10
						DropdownList:TweenSize(UDim2.new(1, 0, 0, newHeight), "Out", "Quad", 0.3, true)
						DropdownContainer:TweenSize(UDim2.new(1, 0, 0, 60 + newHeight), "Out", "Quad", 0.3, true) -- üî• Expand space
						DropdownButton.Text = "‚ñ≤"
					else
						DropdownList:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Quad", 0.3, true, function()
							DropdownList.Visible = false
						end)
						DropdownContainer:TweenSize(UDim2.new(1, 0, 0, 60), "Out", "Quad", 0.3, true) -- üî• Reset space
						DropdownButton.Text = "‚ñº"
					end
				end)

				return Dropdown
			end,


                        Timer = function(self, config)
    local TimerFrame = Instance.new("Frame")
    TimerFrame.Size = UDim2.new(1, -10, 0, 40)
    TimerFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TimerFrame.Parent = self.Frame

    local TimerCorner = Instance.new("UICorner")
    TimerCorner.CornerRadius = UDim.new(0, 6)
    TimerCorner.Parent = TimerFrame

    local TimerLabel = Instance.new("TextLabel")
    TimerLabel.Size = UDim2.new(1, 0, 1, 0)
    TimerLabel.BackgroundTransparency = 1
    TimerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TimerLabel.Font = Enum.Font.GothamBold
    TimerLabel.TextScaled = true
    TimerLabel.Text = "00:00:00"
    TimerLabel.Parent = TimerFrame

    local totalSeconds = (config.HourDuration or 0) * 3600 + (config.MinuteDuration or 0) * 60 + (config.SecondDuration or 0)
    local running = config.AutoStart
    local isCountdown = config.Countdown
    local loop = config.Loop
    local startTime = tick()

    -- Function to format time
    local function formatTime(seconds)
        local days = math.floor(seconds / 86400)
        local hours = math.floor((seconds % 86400) / 3600)
        local minutes = math.floor((seconds % 3600) / 60)
        local secs = seconds % 60

        if config.ShowTime then
            return string.format("%d Days, %02d:%02d:%02d", days, hours, minutes, secs)
        else
            return string.format("%02d:%02d:%02d", hours, minutes, secs)
        end
    end

    -- Timer logic
    task.spawn(function()
        while running do
            local elapsed = tick() - startTime
            local currentSeconds = isCountdown and (totalSeconds - elapsed) or elapsed

            if currentSeconds <= 0 then
                if config.OnComplete then
                    config.OnComplete()
                end
                if loop then
                    startTime = tick()
                else
                    break
                end
            end

            TimerLabel.Text = formatTime(math.max(0, currentSeconds))
            task.wait(1)
        end
    end)

    -- Return timer object with controls
    local TimerObject = {
        Instance = TimerFrame,
        Start = function(self)
            running = true
            startTime = tick()
        end,
        Stop = function(self)
            running = false
        end,
        Reset = function(self)
            running = false
            startTime = tick()
            TimerLabel.Text = formatTime(totalSeconds)
        end
    }

    -- Add Start/Stop buttons if AutoStart is false
    if not config.AutoStart then
        local StartButton = Instance.new("TextButton")
        StartButton.Size = UDim2.new(0.5, -5, 1, 0)
        StartButton.Position = UDim2.new(0, 0, 0, 40)
        StartButton.Text = "Start"
        StartButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
        StartButton.Parent = TimerFrame
        StartButton.MouseButton1Click:Connect(function()
            TimerObject:Start()
        end)

        local StopButton = Instance.new("TextButton")
        StopButton.Size = UDim2.new(0.5, -5, 1, 0)
        StopButton.Position = UDim2.new(0.5, 5, 0, 40)
        StopButton.Text = "Stop"
        StopButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        StopButton.Parent = TimerFrame
        StopButton.MouseButton1Click:Connect(function()
            TimerObject:Stop()
        end)
    end

    return TimerObject
end,
                        

			CreateSlider = function(self, config)
				local SliderName = config.Name or "Slider"
				local MinValue = config.MinValue or 0
				local MaxValue = config.MaxValue or 100
				local CurrentValue = math.clamp(config.CurrentValue or MinValue, MinValue, MaxValue)
				local Increment = config.Increasement or 1
				local Suffix = config.Suffix or ""
				local Script = config.Script or function() end

				local SliderFrame = Instance.new("Frame")
				SliderFrame.Size = UDim2.new(1, -10, 0, 50)
				SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
				SliderFrame.Parent = self.Frame

				local SliderLabel = Instance.new("TextLabel")
				SliderLabel.Size = UDim2.new(1, -10, 0, 20)
				SliderLabel.Position = UDim2.new(0, 5, 0, 0)
				SliderLabel.Text = SliderName .. ": " .. CurrentValue .. Suffix
				SliderLabel.Font = Enum.Font.GothamBold
				SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				SliderLabel.BackgroundTransparency = 1
				SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
				SliderLabel.Parent = SliderFrame

				local SliderBar = Instance.new("Frame")
				SliderBar.Size = UDim2.new(1, -10, 0, 8)
				SliderBar.Position = UDim2.new(0, 5, 0, 25)
				SliderBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				SliderBar.Parent = SliderFrame

				local SliderFill = Instance.new("Frame")
				SliderFill.Size = UDim2.new((CurrentValue - MinValue) / (MaxValue - MinValue), 0, 1, 0)
				SliderFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
				SliderFill.Parent = SliderBar

				local SliderButton = Instance.new("TextButton")
				SliderButton.Size = UDim2.new(0, 15, 1.5, 0)
				SliderButton.Position = UDim2.new((CurrentValue - MinValue) / (MaxValue - MinValue), -7, -0.25, 0)
				SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SliderButton.Text = ""
				SliderButton.Parent = SliderBar

				local ButtonCorner = Instance.new("UICorner")
				ButtonCorner.CornerRadius = UDim.new(1, 0)
				ButtonCorner.Parent = SliderButton

				local function UpdateSlider(input)
					local Position = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
					local NewValue = math.floor((MinValue + (MaxValue - MinValue) * Position) / Increment) * Increment

					SliderFill.Size = UDim2.new(Position, 0, 1, 0)
					SliderButton.Position = UDim2.new(Position, -7, -0.25, 0)
					SliderLabel.Text = SliderName .. ": " .. NewValue .. " " .. Suffix  -- Added space before suffix

					pcall(Script, NewValue)
				end

				SliderButton.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						UpdateSlider(input)
						local moveConnection
						local releaseConnection
						moveConnection = game:GetService("UserInputService").InputChanged:Connect(function(moveInput)
							if moveInput.UserInputType == Enum.UserInputType.MouseMovement then
								UpdateSlider(moveInput)
							end
						end)
						releaseConnection = game:GetService("UserInputService").InputEnded:Connect(function(releaseInput)
							if releaseInput.UserInputType == Enum.UserInputType.MouseButton1 then
								if moveConnection then moveConnection:Disconnect() end
								if releaseConnection then releaseConnection:Disconnect() end
							end
						end)
					end
				end)


				return {
					Frame = SliderFrame,
					SetValue = function(value)
						local ClampedValue = math.clamp(value, MinValue, MaxValue)
						local Position = (ClampedValue - MinValue) / (MaxValue - MinValue)
						SliderFill.Size = UDim2.new(Position, 0, 1, 0)
						SliderButton.Position = UDim2.new(Position, -7, -0.25, 0)
						SliderLabel.Text = SliderName .. ": " .. ClampedValue .. Suffix
						pcall(Script, ClampedValue)
					end
				}
			end
		}

		return Tab
	end 

	return Cryptic
end

return Cryptic
