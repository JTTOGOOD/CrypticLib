local NovaLib = {}
NovaLib.__index = NovaLib

-- Services
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

function NovaLib:CreateWindow(options)
	local WindowData = {
		Name = options.Name or "Nova UI",
		ToggleWindowVisibility = options.ToggleWindowVisibility ~= false,
		WindowVisibilityToggle = options.WindowVisibilityToggle or "LeftControl",
		WindowDraggable = options.WindowDraggable ~= false,
	}

	-- ScreenGui
	local NovaUI = Instance.new("ScreenGui")
	NovaUI.Name = "NovaUI"
	NovaUI.Parent = CoreGui
	NovaUI.ResetOnSpawn = false
	NovaUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	-- Main Window Frame
	local Window = Instance.new("Frame")
	Window.Name = "Window"
	Window.Parent = NovaUI
	Window.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	Window.BorderColor3 = Color3.fromRGB(0, 0, 250)
	Window.BorderSizePixel = 0
	Window.Position = UDim2.new(0.33, 0, 0.21, 0)
	Window.Size = UDim2.new(0, 350, 0, 400)

	local WindowCorner = Instance.new("UICorner")
	WindowCorner.CornerRadius = UDim.new(0, 11)
	WindowCorner.Parent = Window

	-- Title Bar
	local NovaUITitle = Instance.new("TextLabel")
	NovaUITitle.Name = "NovaUITitle"
	NovaUITitle.Parent = Window
	NovaUITitle.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	NovaUITitle.BorderSizePixel = 0
	NovaUITitle.Position = UDim2.new(0.05, 0, 0, 0)
	NovaUITitle.Size = UDim2.new(0, 310, 0, 50)
	NovaUITitle.Font = Enum.Font.ArialBold
	NovaUITitle.Text = WindowData.Name
	NovaUITitle.TextColor3 = Color3.new(1, 1, 1)
	NovaUITitle.TextSize = 21
	NovaUITitle.TextXAlignment = Enum.TextXAlignment.Left
	NovaUITitle.Active = true

	local TitleUICorner = Instance.new("UICorner")
	TitleUICorner.CornerRadius = UDim.new(0, 11)
	TitleUICorner.Parent = NovaUITitle

	-- Separator Line
	local Line = Instance.new("Frame")
	Line.Name = "Line"
	Line.Parent = Window
	Line.BackgroundColor3 = Color3.fromRGB(39, 39, 39)
	Line.BorderSizePixel = 0
	Line.Position = UDim2.new(0, 0, 0.11, 0)
	Line.Size = UDim2.new(1, 0, 0, 2)

	-- Content Holder
	local ContentHolder = Instance.new("Frame")
	ContentHolder.Name = "ContentHolder"
	ContentHolder.Parent = Window
	ContentHolder.BackgroundTransparency = 1
	ContentHolder.Position = UDim2.new(0, 0, 0.125, 0)
	ContentHolder.Size = UDim2.new(1, 0, 0.875, 0)

	-- Close Button
	local CloseButton = Instance.new("TextButton")
	CloseButton.Name = "CloseButton"
	CloseButton.Parent = Window
	CloseButton.BackgroundTransparency = 1
	CloseButton.Position = UDim2.new(0.89, 0, 0.025, 0)
	CloseButton.Size = UDim2.new(0, 30, 0, 30)
	CloseButton.Font = Enum.Font.SourceSans
	CloseButton.Text = "âœ–"
	CloseButton.TextColor3 = Color3.new(0, 0, 0)
	CloseButton.TextSize = 25
	CloseButton.MouseButton1Click:Connect(function()
		Window.Visible = false
	end)

	-- Minimize Button
	local MinimizeButton = Instance.new("TextButton")
	MinimizeButton.Name = "MinimizeButton"
	MinimizeButton.Parent = Window
	MinimizeButton.BackgroundTransparency = 1
	MinimizeButton.Position = UDim2.new(0.785, 0, 0.025, 0)
	MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
	MinimizeButton.Font = Enum.Font.SourceSansBold
	MinimizeButton.Text = "-"
	MinimizeButton.TextColor3 = Color3.new(1, 1, 1)
	MinimizeButton.TextSize = 30
	MinimizeButton.MouseButton1Click:Connect(function()
		ContentHolder.Visible = not ContentHolder.Visible
	end)

	-- Toggle Visibility Keybind
	if WindowData.ToggleWindowVisibility then
		UserInputService.InputBegan:Connect(function(input, gameProcessed)
			if not gameProcessed and input.KeyCode == Enum.KeyCode[WindowData.WindowVisibilityToggle] then
				Window.Visible = not Window.Visible
			end
		end)
	end

	-- Dragging
	if WindowData.WindowDraggable then
		local dragging = false
		local dragInput, dragStart, startPos

		local function update(input)
			local delta = input.Position - dragStart
			Window.Position = UDim2.new(
				startPos.X.Scale,
				startPos.X.Offset + delta.X,
				startPos.Y.Scale,
				startPos.Y.Offset + delta.Y
			)
		end

		Window.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = true
				dragStart = input.Position
				startPos = Window.Position

				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
					end
				end)
			end
		end)

		Window.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end)

		RunService.RenderStepped:Connect(function()
			if dragging and dragInput then
				update(dragInput)
			end
		end)
	end

	-- Return the table
	WindowData.Main = Window
	WindowData.Content = ContentHolder
	return setmetatable(WindowData, NovaLib)
end

function Window:NewTab(tabName)
	local TabButton = Instance.new("TextButton")
	TabButton.Name = tabName .. "_Button"
	TabButton.Parent = self.Tablist or Instance.new("ScrollingFrame", self.Window)
	TabButton.BackgroundTransparency = 1
	TabButton.Size = UDim2.new(0, 70, 0, 16)
	TabButton.Font = Enum.Font.SourceSansBold
	TabButton.Text = tabName
	TabButton.TextColor3 = Color3.fromRGB(141, 141, 141)
	TabButton.TextSize = 18
	TabButton.TextWrapped = true

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 4)
	UICorner.Parent = TabButton

	-- Tab content frame
	local TabFrame = Instance.new("ScrollingFrame")
	TabFrame.Name = tabName .. "_Content"
	TabFrame.Parent = self.Window
	TabFrame.Size = UDim2.new(0, 330, 0, 293)
	TabFrame.Position = UDim2.new(0.0314, 0, 0.245, 0)
	TabFrame.BackgroundTransparency = 1
	TabFrame.Visible = false
	TabFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
	TabFrame.ScrollBarThickness = 4

	local Layout = Instance.new("UIListLayout")
	Layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	Layout.SortOrder = Enum.SortOrder.LayoutOrder
	Layout.Parent = TabFrame

	-- Initialize tablist if not already done
	if not self.Tablist then
		local Tablist = Instance.new("ScrollingFrame")
		Tablist.Name = "Tablist"
		Tablist.Parent = self.Window
		Tablist.Active = true
		Tablist.BackgroundTransparency = 1
		Tablist.Position = UDim2.new(0.04857, 0, 0.14, 0)
		Tablist.Size = UDim2.new(0, 317, 0, 32)
		Tablist.CanvasSize = UDim2.new(0, 1000, 0, 32)
		Tablist.HorizontalScrollBarInset = Enum.ScrollBarInset.Always
		Tablist.ScrollBarThickness = 2

		local TabLayout = Instance.new("UIListLayout", Tablist)
		TabLayout.FillDirection = Enum.FillDirection.Horizontal
		TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
		TabLayout.Padding = UDim.new(0, 6)

		self.Tablist = Tablist
	end

	-- Store references
	self.Tabs = self.Tabs or {}
	self.Tabs[tabName] = {Button = TabButton, Frame = TabFrame}

	-- Tab switch logic
	TabButton.MouseButton1Click:Connect(function()
		for _, tab in pairs(self.Tabs) do
			tab.Frame.Visible = false
			tab.Button.BackgroundTransparency = 1
			tab.Button.TextColor3 = Color3.fromRGB(141, 141, 141)
			tab.Button.TextSize = 18
			tab.Button.TextStrokeTransparency = 1
			tab.Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		end

		TabFrame.Visible = true
		TabButton.BackgroundTransparency = 0
		TabButton.BackgroundColor3 = Color3.fromRGB(39, 39, 39)
		TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		TabButton.TextSize = 20
		TabButton.TextStrokeTransparency = 0
	end)

	-- Auto-select first tab
	if not self.SelectedTab then
		TabButton:MouseButton1Click()
		self.SelectedTab = TabFrame
	end

	return TabFrame
end


return NovaLib
