local NovaLib = {}
NovaLib.__index = NovaLib

local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

function NovaLib:CreateWindow(options)
    local WindowData = {
        Name = options.Name or "Nova UI",
        ToggleWindowVisibility = options.ToggleWindowVisibility ~= false,
        WindowVisibilityToggle = options.WindowVisibilityToggle or "LeftControl",
        WindowDraggable = options.WindowDraggable ~= false,
        NovaPrompts = {
            NovaLibWarnErrors = options.NovaPrompts and options.NovaPrompts.NovaLibWarnErrors ~= false,
            NovaLibRemoteEventWatch = options.NovaPrompts and options.NovaPrompts.NovaLibRemoteEventWatch == true,
            PrivateMode = options.NovaPrompts and options.NovaPrompts.PrivateMode or false,
        }
    }

    -- Creating GUI Elements inside CoreGui
    local NovaUI = Instance.new("ScreenGui")
    NovaUI.Name = "NovaUI"
    NovaUI.Parent = CoreGui
    NovaUI.ResetOnSpawn = false
    NovaUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local Window = Instance.new("Frame")
    Window.Name = "Window"
    Window.Parent = NovaUI
    Window.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    Window.Size = UDim2.new(0, 350, 0, 400)
    Window.Position = UDim2.new(0.3, 0, 0.2, 0)
    Window.Active = WindowData.WindowDraggable
    Window.Draggable = WindowData.WindowDraggable

    local WindowCorner = Instance.new("UICorner")
    WindowCorner.CornerRadius = UDim.new(0, 11)
    WindowCorner.Parent = Window

    local Title = Instance.new("TextLabel")
    Title.Name = "NovaUITitle"
    Title.Parent = Window
    Title.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    Title.Size = UDim2.new(0, 310, 0, 50)
    Title.Position = UDim2.new(0.05, 0, 0, 0)
    Title.Font = Enum.Font.ArialBold
    Title.Text = WindowData.Name
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 21
    Title.TextXAlignment = Enum.TextXAlignment.Left

    -- UI Visibility Toggle
    if WindowData.ToggleWindowVisibility then
        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and input.KeyCode == Enum.KeyCode[WindowData.WindowVisibilityToggle] then
                Window.Visible = not Window.Visible
            end
        end)
    end

    -- Remote Event Watch (for kicks, etc.)
    if WindowData.NovaPrompts.NovaLibRemoteEventWatch then
        local function onRemoteEvent(event)
            warn("NovaLib Remote Event Watch Found: " .. event.Name)
        end

        for _, event in pairs(game:GetDescendants()) do
            if event:IsA("RemoteEvent") or event:IsA("RemoteFunction") then
                event.Changed:Connect(function()
                    onRemoteEvent(event)
                end)
            end
        end
    end

    return setmetatable(WindowData, NovaLib)
end

return NovaLib
