warn("Report to (@MynamesJT) on Discord if you come across any issues.")

-- Cryptic UI Library
local Cryptic = {}

function Cryptic:CreateWindow(config)
    local Name = config.Name or "Cryptic UI"
    local LoadingScreenEnabled = config.LoadingScreen or false
    local LoadingScreenDuration = config.LoadingScreenDuration or 2
    local LoadingTitle = config.LoadingTitle or "Loading..."
    local LoadingSubtitle = config.LoadingSubtitle or "Please wait"
    local Theme = config.Theme or Color3.fromRGB(25, 25, 25)
    local DebugMode = config.LibraryElementObservation or false

    local function debugPrint(elementName, success, errMsg)
        if DebugMode then
            if success then
                print("✅ " .. elementName .. " passed!")
            else
                warn("❌ Error with " .. elementName .. ": " .. errMsg)
            end
        end
    end

    -- Create ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    local success, err = pcall(function()
        ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    end)
    debugPrint("ScreenGui", success, err)

    -- Create MainFrame
    local MainFrame = Instance.new("Frame")
    success, err = pcall(function()
        MainFrame.Size = UDim2.new(0, 562, 0, 375) -- UI Size
        MainFrame.Position = UDim2.new(0.5, -281, 0.5, -187) -- Centered
        MainFrame.BackgroundColor3 = Theme
        MainFrame.BorderSizePixel = 0
        MainFrame.Visible = false
        MainFrame.Parent = ScreenGui
    end)
    debugPrint("MainFrame", success, err)

    -- Create UICorner for rounded edges
    local UICorner = Instance.new("UICorner")
    success, err = pcall(function()
        UICorner.CornerRadius = UDim.new(0, 8)
        UICorner.Parent = MainFrame
    end)
    debugPrint("UICorner", success, err)

    -- Create Title Label
    local TitleLabel = Instance.new("TextLabel")
    success, err = pcall(function()
        TitleLabel.Size = UDim2.new(1, 0, 0, 35)
        TitleLabel.BackgroundTransparency = 1
        TitleLabel.Text = Name
        TitleLabel.TextSize = 18
        TitleLabel.Font = Enum.Font.GothamBold
        TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        TitleLabel.Parent = MainFrame
    end)
    debugPrint("TitleLabel", success, err)

    -- Show Loading Screen (if enabled)
    if LoadingScreenEnabled then
        local LoadingFrame = Instance.new("Frame")
        success, err = pcall(function()
            LoadingFrame.Size = UDim2.new(1, 0, 1, 0)
            LoadingFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
            LoadingFrame.Parent = ScreenGui
        end)
        debugPrint("LoadingFrame", success, err)

        local LoadingLabel = Instance.new("TextLabel")
        success, err = pcall(function()
            LoadingLabel.Size = UDim2.new(1, 0, 0, 50)
            LoadingLabel.Position = UDim2.new(0, 0, 0.5, -25)
            LoadingLabel.Text = LoadingTitle
            LoadingLabel.TextSize = 20
            LoadingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            LoadingLabel.Font = Enum.Font.GothamBold
            LoadingLabel.Parent = LoadingFrame
        end)
        debugPrint("LoadingLabel", success, err)

        task.spawn(function()
            wait(LoadingScreenDuration)
            LoadingFrame:Destroy()
            MainFrame.Visible = true
        end)
    else
        MainFrame.Visible = true
    end

    -- **Draggable Window**
    local Dragging, DragInput, DragStart, StartPos

    TitleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            DragStart = input.Position
            StartPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)

    TitleLabel.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            DragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == DragInput and Dragging then
            local delta = input.Position - DragStart
            MainFrame.Position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + delta.X, StartPos.Y.Scale, StartPos.Y.Offset + delta.Y)
        end
    end)

    -- **Tab List**
    local TabListContainer = Instance.new("Frame")
    success, err = pcall(function()
        TabListContainer.Size = UDim2.new(1, 0, 0, 30)
        TabListContainer.Position = UDim2.new(0, 0, 0, 35)
        TabListContainer.BackgroundTransparency = 1
        TabListContainer.Parent = MainFrame
    end)
    debugPrint("TabListContainer", success, err)

local TabList = Instance.new("ScrollingFrame")
success, err = pcall(function()
    TabList.Size = UDim2.new(1, 0, 1, 0)
    TabList.CanvasSize = UDim2.new(0, 0, 1, 0) -- Start small, expand dynamically
    TabList.ScrollBarThickness = 4
    TabList.ScrollingDirection = Enum.ScrollingDirection.X -- Enable horizontal scrolling
    TabList.BackgroundTransparency = 1
    TabList.Parent = TabListContainer
end)
debugPrint("TabList", success, err)

local TabLayout = Instance.new("UIListLayout")
success, err = pcall(function()
    TabLayout.FillDirection = Enum.FillDirection.Horizontal
    TabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    TabLayout.Padding = UDim.new(0, 5)
    TabLayout.Parent = TabList
end)
debugPrint("TabLayout", success, err)

-- Dynamically update CanvasSize when tabs are added
TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    TabList.CanvasSize = UDim2.new(0, TabLayout.AbsoluteContentSize.X, 1, 0)
end)

    local Tabs = {}

    function Cryptic:CreateTab(tabName)
        local TabButton = Instance.new("TextButton")
        local success, err = pcall(function()
            TabButton.Size = UDim2.new(0, 100, 1, 0)
            TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            TabButton.Text = tabName
            TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            TabButton.Font = Enum.Font.GothamBold
            TabButton.Parent = TabList
        end)
        debugPrint("Tab Button: " .. tabName, success, err)

        local TabFrame = Instance.new("Frame")
        success, err = pcall(function()
            TabFrame.Size = UDim2.new(1, 0, 1, -65)
            TabFrame.Position = UDim2.new(0, 0, 0, 65)
            TabFrame.BackgroundColor3 = Theme
            TabFrame.Visible = false
            TabFrame.Parent = MainFrame
        end)
        debugPrint("Tab Frame: " .. tabName, success, err)

        Tabs[tabName] = TabFrame

        TabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(Tabs) do tab.Visible = false end
            TabFrame.Visible = true
        end)

        return {
            Frame = TabFrame,
            CreateButton = function(self, config)
                local Button = Instance.new("TextButton")
                Button.Size = UDim2.new(0.9, 0, 0, 40)
                Button.Position = UDim2.new(0.05, 0, 0, 0)
                Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                Button.Text = config.Name or "Button"
                Button.TextColor3 = Color3.fromRGB(255, 255, 255)
                Button.Font = Enum.Font.GothamBold
                Button.Parent = self.Frame
                Button.MouseButton1Click:Connect(config.Script or function() end)
                return Button
            end
        }
    end

    return Cryptic
end

return Cryptic
