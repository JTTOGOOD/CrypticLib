warn("Report to (@MynamesJT) on Discord if you come across any issues.")

-- Cryptic UI Library
local Cryptic = {}

function Cryptic:CreateWindow(config)
    local Name = config.Name or "Cryptic UI"
    local LoadingScreenEnabled = config.LoadingScreen or false
    local LoadingScreenDuration = config.LoadingScreenDuration or 2
    local LoadingTitle = config.LoadingTitle or "Loading..."
    local Theme = config.Theme or Color3.fromRGB(25, 25, 25)
    
    local Player = game:GetService("Players").LocalPlayer
    local CoreGui = game:GetService("CoreGui") -- Use CoreGui to persist after reset

    -- Check if UI already exists
    local ScreenGui = CoreGui:FindFirstChild("CrypticUI")
    if not ScreenGui then
        ScreenGui = Instance.new("ScreenGui")
        ScreenGui.Name = "CrypticUI"
        ScreenGui.ResetOnSpawn = false -- **Prevents UI from being removed on reset**
        ScreenGui.Parent = CoreGui
    end

    -- Create MainFrame (or find existing one)
    local MainFrame = ScreenGui:FindFirstChild("MainFrame") or Instance.new("Frame")
    MainFrame.Size = UDim2.new(0, 562, 0, 375)
    MainFrame.Position = UDim2.new(0.5, -281, 0.5, -187)
    MainFrame.BackgroundColor3 = Theme
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui

    -- Create UICorner for rounded edges
    if not MainFrame:FindFirstChild("UICorner") then
        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 8)
        UICorner.Parent = MainFrame
    end

    -- Create Title Label (Only add if it doesnâ€™t exist)
    if not MainFrame:FindFirstChild("TitleLabel") then
        local TitleLabel = Instance.new("TextLabel")
        TitleLabel.Name = "TitleLabel"
        TitleLabel.Size = UDim2.new(1, 0, 0, 35)
        TitleLabel.BackgroundTransparency = 1
        TitleLabel.Text = Name
        TitleLabel.TextSize = 18
        TitleLabel.Font = Enum.Font.GothamBold
        TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        TitleLabel.Parent = MainFrame
    end

    -- **Visibility State Storage**
    local UIVisible = true  -- Default is visible

    -- **CreateOpener Function (Now Uses CoreGui UI)**
    function Cryptic:CreateOpener(Keybind)
        Keybind = Keybind or "LeftControl"
        local UIS = game:GetService("UserInputService")

        UIS.InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            if input.KeyCode == Enum.KeyCode[Keybind] then
                UIVisible = not UIVisible
                MainFrame.Visible = UIVisible
            end
        end)
    end

    -- **Show Loading Screen (if enabled)**
    if LoadingScreenEnabled then
        local LoadingFrame = Instance.new("Frame")
        LoadingFrame.Size = UDim2.new(1, 0, 1, 0)
        LoadingFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
        LoadingFrame.Parent = ScreenGui

        local LoadingLabel = Instance.new("TextLabel")
        LoadingLabel.Size = UDim2.new(1, 0, 0, 50)
        LoadingLabel.Position = UDim2.new(0, 0, 0.5, -25)
        LoadingLabel.Text = LoadingTitle
        LoadingLabel.TextSize = 20
        LoadingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        LoadingLabel.Font = Enum.Font.GothamBold
        LoadingLabel.Parent = LoadingFrame

        task.spawn(function()
            wait(LoadingScreenDuration)
            LoadingFrame:Destroy()
            MainFrame.Visible = UIVisible
        end)
    else
        MainFrame.Visible = UIVisible
    end

    local Tabs = {}

function Cryptic:CreateTab(tabName)
    if not TabList then
        warn("TabList is missing! Make sure it's initialized before calling CreateTab.")
        return
    end

    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(0, 100, 1, 0)
    TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TabButton.Text = tabName
    TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TabButton.Font = Enum.Font.GothamBold
    TabButton.Parent = TabList

    local TabFrame = Instance.new("ScrollingFrame")
    TabFrame.Size = UDim2.new(1, 0, 1, -100)
    TabFrame.Position = UDim2.new(0, 0, 0, 65)
    TabFrame.BackgroundColor3 = Theme
    TabFrame.Visible = false
    TabFrame.Parent = MainFrame
    TabFrame.CanvasSize = UDim2.new(0, 0, 1, 0)
    TabFrame.ScrollBarThickness = 5
    TabFrame.ScrollingDirection = Enum.ScrollingDirection.Y

    local ButtonLayout = Instance.new("UIListLayout")
    ButtonLayout.Parent = TabFrame
    ButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ButtonLayout.Padding = UDim.new(0, 5)

    ButtonLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, ButtonLayout.AbsoluteContentSize.Y + 10)
    end)

    Tabs[tabName] = TabFrame

    TabButton.MouseButton1Click:Connect(function()
        for _, tab in pairs(Tabs) do tab.Visible = false end
        TabFrame.Visible = true
    end)

    local Tab = {
        Frame = TabFrame,

        CreateButton = function(self, config)
            local Button = Instance.new("TextButton")
            Button.Size = UDim2.new(1, -10, 0, 40)
            Button.Text = "  " .. (config.Name or "Button")
            Button.Font = Enum.Font.GothamBold
            Button.TextColor3 = Color3.fromRGB(255, 255, 255)
            Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            Button.Parent = self.Frame

            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 6)
            ButtonCorner.Parent = Button

            Button.MouseButton1Click:Connect(function()
                if config.Script then config.Script() end
            end)

            return Button
        end,

        CreateToggle = function(self, config)
            local ToggleState = config.ToggleState or false
            local ToggleName = config.Name or "Toggle"
            local ToggleScript = config.Script or function() end

            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Size = UDim2.new(1, -10, 0, 35)
            ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            ToggleFrame.Parent = self.Frame

            local FrameCorner = Instance.new("UICorner")
            FrameCorner.CornerRadius = UDim.new(0, 6)
            FrameCorner.Parent = ToggleFrame

            local ToggleLabel = Instance.new("TextLabel")
            ToggleLabel.Size = UDim2.new(1, -70, 1, 0)
            ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
            ToggleLabel.Text = ToggleName
            ToggleLabel.Font = Enum.Font.GothamBold
            ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            ToggleLabel.BackgroundTransparency = 1
            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            ToggleLabel.Parent = ToggleFrame

            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Size = UDim2.new(0, 50, 0.8, 0)
            ToggleButton.Position = UDim2.new(1, -60, 0.1, 0)
            ToggleButton.Text = ToggleState and "ON" or "OFF"
            ToggleButton.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(10, 10, 10)
            ToggleButton.Font = Enum.Font.GothamBold
            ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            ToggleButton.Parent = ToggleFrame

            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 6)
            ButtonCorner.Parent = ToggleButton

            local function UpdateToggle(state)
                ToggleState = state
                ToggleButton.Text = ToggleState and "ON" or "OFF"
                ToggleButton.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(10, 10, 10)
                pcall(ToggleScript, ToggleState)
            end

            ToggleButton.MouseButton1Click:Connect(function()
                UpdateToggle(not ToggleState)
            end)

            return {
                Frame = ToggleFrame,
                SetState = UpdateToggle
            }
        end,

        CreateSlider = function(self, config)
            local SliderName = config.Name or "Slider"
            local MinValue = config.MinValue or 0
            local MaxValue = config.MaxValue or 100
            local CurrentValue = math.clamp(config.CurrentValue or MinValue, MinValue, MaxValue)
            local Increment = config.Increasement or 1
            local Suffix = config.Suffix or ""
            local Script = config.Script or function() end

            local SliderFrame = Instance.new("Frame")
            SliderFrame.Size = UDim2.new(1, -10, 0, 50)
            SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            SliderFrame.Parent = self.Frame

            local SliderLabel = Instance.new("TextLabel")
            SliderLabel.Size = UDim2.new(1, -10, 0, 20)
            SliderLabel.Position = UDim2.new(0, 5, 0, 0)
            SliderLabel.Text = SliderName .. ": " .. CurrentValue .. Suffix
            SliderLabel.Font = Enum.Font.GothamBold
            SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            SliderLabel.BackgroundTransparency = 1
            SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            SliderLabel.Parent = SliderFrame

            local SliderBar = Instance.new("Frame")
            SliderBar.Size = UDim2.new(1, -10, 0, 8)
            SliderBar.Position = UDim2.new(0, 5, 0, 25)
            SliderBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            SliderBar.Parent = SliderFrame

            local SliderFill = Instance.new("Frame")
            SliderFill.Size = UDim2.new((CurrentValue - MinValue) / (MaxValue - MinValue), 0, 1, 0)
            SliderFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
            SliderFill.Parent = SliderBar

            local SliderButton = Instance.new("TextButton")
            SliderButton.Size = UDim2.new(0, 15, 1.5, 0)
            SliderButton.Position = UDim2.new((CurrentValue - MinValue) / (MaxValue - MinValue), -7, -0.25, 0)
            SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SliderButton.Text = ""
            SliderButton.Parent = SliderBar

            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(1, 0)
            ButtonCorner.Parent = SliderButton

            local function UpdateSlider(input)
    local Position = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
    local NewValue = math.floor((MinValue + (MaxValue - MinValue) * Position) / Increment) * Increment

    SliderFill.Size = UDim2.new(Position, 0, 1, 0)
    SliderButton.Position = UDim2.new(Position, -7, -0.25, 0)
    SliderLabel.Text = SliderName .. ": " .. NewValue .. " " .. Suffix  -- Added space before suffix

    pcall(Script, NewValue)
end

SliderButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        UpdateSlider(input)
        local moveConnection
        local releaseConnection
        moveConnection = game:GetService("UserInputService").InputChanged:Connect(function(moveInput)
            if moveInput.UserInputType == Enum.UserInputType.MouseMovement then
                UpdateSlider(moveInput)
            end
        end)
        releaseConnection = game:GetService("UserInputService").InputEnded:Connect(function(releaseInput)
            if releaseInput.UserInputType == Enum.UserInputType.MouseButton1 then
                if moveConnection then moveConnection:Disconnect() end
                if releaseConnection then releaseConnection:Disconnect() end
            end
        end)
    end
end)


            return {
                Frame = SliderFrame,
                SetValue = function(value)
                    local ClampedValue = math.clamp(value, MinValue, MaxValue)
                    local Position = (ClampedValue - MinValue) / (MaxValue - MinValue)
                    SliderFill.Size = UDim2.new(Position, 0, 1, 0)
                    SliderButton.Position = UDim2.new(Position, -7, -0.25, 0)
                    SliderLabel.Text = SliderName .. ": " .. ClampedValue .. Suffix
                    pcall(Script, ClampedValue)
                end
            }
        end
    }

    return Tab
end 

    return Cryptic
end

return Cryptic
