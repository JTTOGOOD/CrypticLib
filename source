-- Cryptic UI Library
local Cryptic = {}

function Cryptic:CreateWindow(config)
    local Name = config.Name or "Cryptic UI"
    local LoadingScreenEnabled = config.LoadingScreen or false
    local LoadingScreenDuration = config.LoadingScreenDuration or 2
    local LoadingTitle = config.LoadingTitle or "Loading..."
    local LoadingSubtitle = config.LoadingSubtitle or "Please wait"
    local Theme = config.Theme or Color3.fromRGB(25, 25, 25)
    local DebugMode = config.LibraryElementObservation or false

    local function debugPrint(elementName, success, errMsg)
        if DebugMode then
            if success then
                print("✅ " .. elementName .. " passed!")
            else
                warn("❌ Error with " .. elementName .. ": " .. errMsg)
            end
        end
    end

    -- Create ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    local success, err = pcall(function()
        ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    end)
    debugPrint("ScreenGui", success, err)

    -- Create MainFrame
    local MainFrame = Instance.new("Frame")
    success, err = pcall(function()
        MainFrame.Size = UDim2.new(0, 562, 0, 375)
        MainFrame.Position = UDim2.new(0.5, -281, 0.5, -187)
        MainFrame.BackgroundColor3 = Theme
        MainFrame.BorderSizePixel = 0
        MainFrame.Visible = false
        MainFrame.Parent = ScreenGui
    end)
    debugPrint("MainFrame", success, err)

    -- Show Loading Screen (if enabled)
    if LoadingScreenEnabled then
        local LoadingFrame = Instance.new("Frame")
        success, err = pcall(function()
            LoadingFrame.Size = UDim2.new(1, 0, 1, 0)
            LoadingFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
            LoadingFrame.Parent = ScreenGui
        end)
        debugPrint("LoadingFrame", success, err)

        local LoadingLabel = Instance.new("TextLabel")
        success, err = pcall(function()
            LoadingLabel.Size = UDim2.new(1, 0, 0, 50)
            LoadingLabel.Position = UDim2.new(0, 0, 0.5, -25)
            LoadingLabel.Text = LoadingTitle
            LoadingLabel.TextSize = 20
            LoadingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            LoadingLabel.Font = Enum.Font.GothamBold
            LoadingLabel.Parent = LoadingFrame
        end)
        debugPrint("LoadingLabel", success, err)

        task.spawn(function()
            wait(LoadingScreenDuration)
            LoadingFrame:Destroy()
            MainFrame.Visible = true
        end)
    else
        MainFrame.Visible = true
    end

    local Tabs = {}

    function Cryptic:CreateTab(tabName)
        local TabButton = Instance.new("TextButton")
        TabButton.Size = UDim2.new(0, 100, 0, 30)
        TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        TabButton.Text = tabName
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.Font = Enum.Font.GothamBold
        TabButton.Parent = MainFrame

        local TabFrame = Instance.new("ScrollingFrame")
        TabFrame.Size = UDim2.new(1, 0, 1, -65)
        TabFrame.Position = UDim2.new(0, 0, 0, 65)
        TabFrame.BackgroundColor3 = Theme
        TabFrame.Visible = false
        TabFrame.Parent = MainFrame
        TabFrame.CanvasSize = UDim2.new(0, 0, 1, 0)
        TabFrame.ScrollBarThickness = 5

        Tabs[tabName] = TabFrame

        TabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(Tabs) do
                tab.Visible = false
            end
            TabFrame.Visible = true
        end)

        local Tab = { Frame = TabFrame }

        function Tab:CreateButton(config)
            local ButtonName = config.Name or "Button"
            local ButtonScript = config.Script or function() print(ButtonName .. " clicked!") end

            local Button = Instance.new("TextButton")
            Button.Size = UDim2.new(1, -10, 0, 40)
            Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            Button.Text = "  " .. ButtonName
            Button.TextColor3 = Color3.fromRGB(255, 255, 255)
            Button.TextXAlignment = Enum.TextXAlignment.Left
            Button.Font = Enum.Font.GothamBold
            Button.Parent = Tab.Frame

            Button.MouseButton1Click:Connect(function()
                local success, err = pcall(ButtonScript)
                if not success then warn("❌ Error in button script: " .. err) end
            end)

            return Button
        end

        function Tab:CreateToggle(options)
            local ToggleFrame = Instance.new("Frame")
            local ToggleButton = Instance.new("TextButton")
            local ToggleLabel = Instance.new("TextLabel")
            local ToggleState = options.ToggleState or false
            local ToggleName = options.Name or "Toggle"

            ToggleFrame.Size = UDim2.new(1, -10, 0, 30)
            ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            ToggleFrame.Parent = self.Frame

            ToggleLabel.Size = UDim2.new(1, -70, 1, 0)
            ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
            ToggleLabel.Text = ToggleName
            ToggleLabel.Parent = ToggleFrame

            ToggleButton.Size = UDim2.new(0, 50, 1, 0)
            ToggleButton.Position = UDim2.new(1, -60, 0, 0)
            ToggleButton.Text = ToggleState and "ON" or "OFF"
            ToggleButton.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(10, 10, 10)
            ToggleButton.Parent = ToggleFrame

            ToggleButton.MouseButton1Click:Connect(function()
                ToggleState = not ToggleState
                ToggleButton.Text = ToggleState and "ON" or "OFF"
                ToggleButton.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(10, 10, 10)
                if options.Script then
                    options.Script(ToggleState)
                end
            end)

            return {
                SetState = function(state)
                    ToggleState = state
                    ToggleButton.Text = ToggleState and "ON" or "OFF"
                    ToggleButton.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(10, 10, 10)
                end
            }
        end

        return Tab
    end

    return self
end

return Cryptic
