warn("Report to (@MynamesJT) on Discord if you come across any issues.")

-- Cryptic UI Library
local Cryptic = {}

function Cryptic:CreateWindow(config)
    local Name = config.Name or "Cryptic UI"
    local LoadingScreenEnabled = config.LoadingScreen or false
    local LoadingScreenDuration = config.LoadingScreenDuration or 2
    local LoadingTitle = config.LoadingTitle or "Loading..."
    local LoadingSubtitle = config.LoadingSubtitle or "Please wait"
    local Theme = config.Theme or Color3.fromRGB(25, 25, 25)
    local DebugMode = config.LibraryElementObservation or false

    local function debugPrint(elementName, success, errMsg)
        if DebugMode then
            if success then
                print("✅ " .. elementName .. " passed!")
            else
                warn("❌ Error with " .. elementName .. ": " .. errMsg)
            end
        end
    end

    -- Create ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    local success, err = pcall(function()
        ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    end)
    debugPrint("ScreenGui", success, err)

    -- Create MainFrame
    local MainFrame = Instance.new("Frame")
    success, err = pcall(function()
        MainFrame.Size = UDim2.new(0, 562, 0, 375) -- UI Size
        MainFrame.Position = UDim2.new(0.5, -281, 0.5, -187) -- Centered
        MainFrame.BackgroundColor3 = Theme
        MainFrame.BorderSizePixel = 0
        MainFrame.Visible = false
        MainFrame.Parent = ScreenGui
    end)
    debugPrint("MainFrame", success, err)

    -- Create UICorner for rounded edges
    local UICorner = Instance.new("UICorner")
    success, err = pcall(function()
        UICorner.CornerRadius = UDim.new(0, 8)
        UICorner.Parent = MainFrame
    end)
    debugPrint("UICorner", success, err)

    -- Create Title Label
    local TitleLabel = Instance.new("TextLabel")
    success, err = pcall(function()
        TitleLabel.Size = UDim2.new(1, 0, 0, 35)
        TitleLabel.BackgroundTransparency = 1
        TitleLabel.Text = Name
        TitleLabel.TextSize = 18
        TitleLabel.Font = Enum.Font.GothamBold
        TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        TitleLabel.Parent = MainFrame
    end)
    debugPrint("TitleLabel", success, err)

    -- Show Loading Screen (if enabled)
    if LoadingScreenEnabled then
        local LoadingFrame = Instance.new("Frame")
        success, err = pcall(function()
            LoadingFrame.Size = UDim2.new(1, 0, 1, 0)
            LoadingFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
            LoadingFrame.Parent = ScreenGui
        end)
        debugPrint("LoadingFrame", success, err)

        local LoadingLabel = Instance.new("TextLabel")
        success, err = pcall(function()
            LoadingLabel.Size = UDim2.new(1, 0, 0, 50)
            LoadingLabel.Position = UDim2.new(0, 0, 0.5, -25)
            LoadingLabel.Text = LoadingTitle
            LoadingLabel.TextSize = 20
            LoadingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            LoadingLabel.Font = Enum.Font.GothamBold
            LoadingLabel.Parent = LoadingFrame
        end)
        debugPrint("LoadingLabel", success, err)

        task.spawn(function()
            wait(LoadingScreenDuration)
            LoadingFrame:Destroy()
            MainFrame.Visible = true
        end)
    else
        MainFrame.Visible = true
    end

    -- **Draggable Window**
    local Dragging, DragInput, DragStart, StartPos

    TitleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            DragStart = input.Position
            StartPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)

    TitleLabel.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            DragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == DragInput and Dragging then
            local delta = input.Position - DragStart
            MainFrame.Position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + delta.X, StartPos.Y.Scale, StartPos.Y.Offset + delta.Y)
        end
    end)

    -- **Tab List**
    local TabListContainer = Instance.new("Frame")
    success, err = pcall(function()
        TabListContainer.Size = UDim2.new(1, 0, 0, 30)
        TabListContainer.Position = UDim2.new(0, 0, 0, 35)
        TabListContainer.BackgroundTransparency = 1
        TabListContainer.Parent = MainFrame
    end)
    debugPrint("TabListContainer", success, err)

local TabList = Instance.new("ScrollingFrame")
success, err = pcall(function()
    TabList.Size = UDim2.new(1, 0, 1, 0)
    TabList.CanvasSize = UDim2.new(0, 0, 1, 0) -- Start small, expand dynamically
    TabList.ScrollBarThickness = 4
    TabList.ScrollingDirection = Enum.ScrollingDirection.X -- Enable horizontal scrolling
    TabList.BackgroundTransparency = 1
    TabList.Parent = TabListContainer
end)
debugPrint("TabList", success, err)

local TabLayout = Instance.new("UIListLayout")
success, err = pcall(function()
    TabLayout.FillDirection = Enum.FillDirection.Horizontal
    TabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    TabLayout.Padding = UDim.new(0, 5)
    TabLayout.Parent = TabList
end)
debugPrint("TabLayout", success, err)

-- Dynamically update CanvasSize when tabs are added
TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    TabList.CanvasSize = UDim2.new(0, TabLayout.AbsoluteContentSize.X, 1, 0)
end)

    local Tabs = {}

function Cryptic:CreateTab(tabName)
    local TabButton = Instance.new("TextButton")
    local success, err = pcall(function()
        TabButton.Size = UDim2.new(0, 100, 1, 0)
        TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        TabButton.Text = tabName
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.Font = Enum.Font.GothamBold
        TabButton.Parent = TabList
    end)
    debugPrint("Tab Button: " .. tabName, success, err)

    -- Create ScrollingFrame for the Tab
    local TabFrame = Instance.new("ScrollingFrame")
    success, err = pcall(function()
        TabFrame.Size = UDim2.new(1, 0, 1, -65)
        TabFrame.Position = UDim2.new(0, 0, 0, 65)
        TabFrame.BackgroundColor3 = Theme
        TabFrame.Visible = false
        TabFrame.Parent = MainFrame
        TabFrame.CanvasSize = UDim2.new(0, 0, 1, 0)
        TabFrame.ScrollBarThickness = 5
        TabFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    end)
    debugPrint("Tab ScrollingFrame: " .. tabName, success, err)

    -- Create UIListLayout for buttons
    local ButtonLayout = Instance.new("UIListLayout")
    success, err = pcall(function()
        ButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ButtonLayout.Padding = UDim.new(0, 5)
        ButtonLayout.Parent = TabFrame
    end)
    debugPrint("ButtonLayout for: " .. tabName, success, err)

    -- Adjust CanvasSize dynamically based on content size
    ButtonLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, ButtonLayout.AbsoluteContentSize.Y + 10)
    end)

    Tabs[tabName] = TabFrame

    TabButton.MouseButton1Click:Connect(function()
        for _, tab in pairs(Tabs) do tab.Visible = false end
        TabFrame.Visible = true
    end)

    local Tab = {
        Frame = TabFrame,

        CreateButton = function(self, config)
            local ButtonName = config.Name or "Button"
            local ButtonScript = config.Script or function() print(ButtonName .. " clicked!") end

            local Button = Instance.new("TextButton")
            success, err = pcall(function()
                Button.Size = UDim2.new(1, -10, 0, 40)
                Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                Button.Text = "  " .. ButtonName
                Button.TextColor3 = Color3.fromRGB(255, 255, 255)
                Button.TextXAlignment = Enum.TextXAlignment.Left
                Button.Font = Enum.Font.GothamBold
                Button.Parent = self.Frame

                local UICorner = Instance.new("UICorner")
                UICorner.CornerRadius = UDim.new(0, 6)
                UICorner.Parent = Button

                Button.MouseButton1Click:Connect(function()
                    local success, err = pcall(ButtonScript)
                    if not success then warn("❌ Error in button script: " .. err) end
                end)
            end)
            debugPrint("Button: " .. ButtonName, success, err)

            return Button
        end,

        CreateToggle = function(self, options)
    local ToggleFrame = Instance.new("Frame")
    local ToggleButton = Instance.new("TextButton")
    local ToggleLabel = Instance.new("TextLabel") -- Create a label
    local ToggleState = options.ToggleState or false
    local ToggleName = options.Name or "Toggle" -- Default name if not provided

    -- Set up Toggle Frame
    ToggleFrame.Size = UDim2.new(1, -10, 0, 30)
    ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    ToggleFrame.Parent = self.Frame

    -- Set up Toggle Label (Name of the Toggle)
    ToggleLabel.Size = UDim2.new(1, -70, 1, 0) -- Take up space on the left
    ToggleLabel.Position = UDim2.new(0, 10, 0, 0) -- Slight offset from the edge
    ToggleLabel.Text = ToggleName
    ToggleLabel.TextSize = 14
    ToggleLabel.Font = Enum.Font.GothamBold
    ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleLabel.BackgroundTransparency = 1
    ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    ToggleLabel.Parent = ToggleFrame

    -- Set up Toggle Button
    ToggleButton.Size = UDim2.new(0, 50, 1, 0)
    ToggleButton.Position = UDim2.new(1, -60, 0, 0)
    ToggleButton.Text = ToggleState and "ON" or "OFF"
    ToggleButton.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(10, 10, 10)
    ToggleButton.Parent = ToggleFrame

    -- Handle toggle clicks
    ToggleButton.MouseButton1Click:Connect(function()
        ToggleState = not ToggleState
        ToggleButton.Text = ToggleState and "ON" or "OFF"
        ToggleButton.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(10, 10, 10)

        -- Check if options.Script exists before calling it
        if options.Script then
            options.Script(ToggleState)
        end
    end)

    return {
        SetState = function(state)
            ToggleState = state
            ToggleButton.Text = ToggleState and "ON" or "OFF"
            ToggleButton.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(10, 10, 10)
        end
    }
end

    }

    return Tab
end

function Cryptic:CreateNotification(config)
    local Message = config.Message or "Notification"
    local Duration = config.Duration or 3
    local NotificationColor = config.Color or Color3.fromRGB(0, 170, 255) -- Default blue

    -- Create Notification Frame
    local NotificationFrame = Instance.new("Frame")
    NotificationFrame.Size = UDim2.new(0, 250, 0, 50)
    NotificationFrame.Position = UDim2.new(1, -260, 1, -60) -- Appears at bottom-right
    NotificationFrame.BackgroundColor3 = NotificationColor
    NotificationFrame.BackgroundTransparency = 0.2
    NotificationFrame.Parent = ScreenGui

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = NotificationFrame

    -- Create Notification Label
    local NotificationLabel = Instance.new("TextLabel")
    NotificationLabel.Size = UDim2.new(1, -10, 1, -10)
    NotificationLabel.Position = UDim2.new(0, 5, 0, 5)
    NotificationLabel.Text = Message
    NotificationLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    NotificationLabel.TextSize = 14
    NotificationLabel.Font = Enum.Font.GothamBold
    NotificationLabel.BackgroundTransparency = 1
    NotificationLabel.TextWrapped = true
    NotificationLabel.Parent = NotificationFrame

    -- Fade out and remove after duration
    task.spawn(function()
        wait(Duration)
        for i = 1, 10 do
            NotificationFrame.BackgroundTransparency = NotificationFrame.BackgroundTransparency + 0.1
            NotificationLabel.TextTransparency = NotificationLabel.TextTransparency + 0.1
            wait(0.1)
        end
        NotificationFrame:Destroy()
    end)
end

function Tab:CreateSlider(options)
    local SliderName = options.Name or "Slider"
    local Suffix = options.Suffix or ""
    local Min = options.Min or 0
    local Max = options.Max or 100
    local CurrentValue = options.CurrentValue or Min
    local Increasement = options.Increasement or 1
    local Script = options.Script or function(value) print(SliderName .. " value:", value) end

    -- Slider Frame
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Size = UDim2.new(1, -10, 0, 40)
    SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    SliderFrame.Parent = self.Frame

    -- Slider Label
    local SliderLabel = Instance.new("TextLabel")
    SliderLabel.Size = UDim2.new(1, -70, 1, 0)
    SliderLabel.Position = UDim2.new(0, 10, 0, 0)
    SliderLabel.Text = SliderName .. ": " .. CurrentValue .. Suffix
    SliderLabel.TextSize = 14
    SliderLabel.Font = Enum.Font.GothamBold
    SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    SliderLabel.BackgroundTransparency = 1
    SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    SliderLabel.Parent = SliderFrame

    -- Slider Bar
    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, -10, 0, 5)
    SliderBar.Position = UDim2.new(0, 5, 1, -10)
    SliderBar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    SliderBar.Parent = SliderFrame

    -- Slider Fill
    local SliderFill = Instance.new("Frame")
    SliderFill.Size = UDim2.new(0, (CurrentValue - Min) / (Max - Min) * (SliderBar.AbsoluteSize.X), 1, 0)
    SliderFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    SliderFill.Parent = SliderBar

    -- Slider Drag Button
    local DragButton = Instance.new("ImageButton")
    DragButton.Size = UDim2.new(0, 15, 0, 15)
    DragButton.Position = UDim2.new((CurrentValue - Min) / (Max - Min), -7, 0.5, -7)
    DragButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    DragButton.Parent = SliderBar

    -- Dragging functionality
    local UserInputService = game:GetService("UserInputService")
    local Dragging = false

    DragButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local MouseX = input.Position.X
            local BarStart = SliderBar.AbsolutePosition.X
            local BarEnd = BarStart + SliderBar.AbsoluteSize.X
            local NewValue = math.clamp(((MouseX - BarStart) / (BarEnd - BarStart)) * (Max - Min) + Min, Min, Max)
            
            -- Round to nearest increment
            NewValue = math.floor(NewValue / Increasement) * Increasement
            
            -- Update visuals
            SliderFill.Size = UDim2.new((NewValue - Min) / (Max - Min), 0, 1, 0)
            DragButton.Position = UDim2.new((NewValue - Min) / (Max - Min), -7, 0.5, -7)
            SliderLabel.Text = SliderName .. ": " .. NewValue .. Suffix
            
            -- Execute script
            Script(NewValue)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = false
        end
    end)

    return {
        SetValue = function(value)
            value = math.clamp(value, Min, Max)
            value = math.floor(value / Increasement) * Increasement
            SliderFill.Size = UDim2.new((value - Min) / (Max - Min), 0, 1, 0)
            DragButton.Position = UDim2.new((value - Min) / (Max - Min), -7, 0.5, -7)
            SliderLabel.Text = SliderName .. ": " .. value .. Suffix
            Script(value)
        end
    }
end

    return Cryptic
end

return Cryptic
